@import "default";
@import "constants";

// Major layouts

@import "_index.scss";
@import "_tab-env_vars.scss.erb";
@import "_tab-stack.scss";

// Common elements

@import "_rebo";
@import "_cardo";
@import "_popup.scss.erb";
@import "_notification-progress-indicator.scss.erb";
@import "_order-by-drag";

@import "~monaco-editor/min/vs/editor/editor.main.css";

// Basic settings

:focus {
  outline: none;
}

input,
textarea,
select {
  font-family: inherit;
}

input::-moz-focus-inner,
button::-moz-focus-inner,
select::-moz-focus-inner {
  border: 0;
  padding: 0;
}

select:-moz-focusring {
  color: rgba(0, 0, 0, 0);
  text-shadow: 0 0 0 black;
}

html {
  @include display-flex;
  @include flex-direction(column);
  width: 100%;
  min-height: 100%;
}

body {
  @include flex-grow(1);
  @include display-flex;
  @include flex-direction(column);
  @include size(100%);
  @include min-size($screen-minimum, $screen-small);
  margin: 0;
  -webkit-font-smoothing: antialiased;
}

button,
input[type="submit"],
input[type="radio"] {
  cursor: pointer;

  &:disabled {
    cursor: not-allowed;
  }
}

button {
  margin: 0;
  border: none;
  @include border-radius(0);
  padding: 0;
  font: inherit;
  color: inherit;
  background-color: transparent;
}

input[type="submit"] {
  @include appearance(none);
}

.mak {
  $select-horizontalpadding: 12px;
  $arrow_width: 8px;

  @include appearance(none);
  margin: 0;
  border: 1px solid $def-mediumlightgrey;
  @include border-radius($def-radius);
  padding: 7px $select-horizontalpadding;
  padding-right: $select-horizontalpadding + $arrow_width + $select-horizontalpadding;
  text-align: left;
  font-size: 16px;
  @include transition(background-color $def-transition_duration);
  background-color: white;
  background-image: url("../images/arrow-down-dark.svg");
  background-size: $arrow_width auto;
  background-position: right $select-horizontalpadding center;
  background-repeat: no-repeat;
  cursor: pointer;
}

.mak:hover,
.mak:focus {
  background-color: $def-verylightgrey;
}

.checkbox {
  $transition_duration: $def-transition_duration;

  z-index: $zindex-checkbox;
  position: relative;
  @include size(46px, 22px);
  @include border-radius($def-radius);
  overflow: hidden;

  &:before {
    z-index: -2;
    content: "";
    @include position(absolute, 0, 0);
    @include size(100%);
    background-color: $def-lightgrey;
  }

  input[type="checkbox"] {
    display: block;
    @include size(100%);
    @include appearance(none);
    margin: 0;
    opacity: 0;
    cursor: pointer;
  }

  .checkbox-svg-wrapper {
    z-index: -1;
    @include position(absolute, 0, 0);
    @include size(50%, 100%);
    @include transition(
        right $transition_duration,
        background-color $transition_duration,
        opacity $transition_duration
    );
    background-color: $def-green;

    svg[check],
    svg[cross] {
      position: absolute;
      @include transition(opacity $transition_duration);
      fill: white;
    }

    svg[check] {
      @include size(24px, 24px);
      top: -1px;
      left: 0;
    }

    svg[cross] {
      @include size(24px, 24px);
      top: -1px;
      left: 0;
    }
  }

  input[type="checkbox"]:not(:checked) + .checkbox-svg-wrapper {
    right: 50%;
    background-color: $def-danger;
  }

  input[type="checkbox"]:disabled + .checkbox-svg-wrapper {
    opacity: 0.5;
  }

  input[type="checkbox"]:not(:checked) + .checkbox-svg-wrapper svg[check],
  input[type="checkbox"]:checked + .checkbox-svg-wrapper svg[cross] {
    opacity: 0;
  }

  input[type="checkbox"]:checked:not(:disabled):hover + .checkbox-svg-wrapper,
  input[type="checkbox"]:checked:not(:disabled):focus + .checkbox-svg-wrapper {
    background-color: $def-green-shade;
  }

  input[type="checkbox"]:not(:checked):not(:disabled):hover + .checkbox-svg-wrapper,
  input[type="checkbox"]:not(:checked):not(:disabled):focus + .checkbox-svg-wrapper {
    background-color: $def-danger-shade;
  }

  &.small {
    @include size(36px, 16px);

    .checkbox-svg-wrapper {
      svg[check] {
        @include size(10px, 9px);
        top: 3px;
        left: 4px;
      }

      svg[cross] {
        @include size(8px, 8px);
        top: 4px;
        left: 5px;
      }
    }
  }
}

[sanitized-markdown] {
  a {
    color: $def-green;

    &:not(:hover):not(:focus) {
      text-decoration: none;
    }
  }

  code {
    @include SourceCodeProWithFallback;
    color: black;
    background-color: $def-verylightgrey;
  }

  &.oneliner {
    @include ellipsis-oneliner;

    * {
      display: inline;
      white-space: nowrap;
      font-size: inherit;
      font-weight: inherit;
    }

    p {
      color: inherit;
      text-decoration: none;
    }

    ul,
    ol {
      padding-left: 0;
      list-style: none;

      li {
        display: inline;

        &:after {
          content: ", ";
        }
      }
    }

    pre {
      white-space: nowrap !important;
    }
  }
}

// Common classes

.vertical-scroll {
  overflow-y: auto;
}
