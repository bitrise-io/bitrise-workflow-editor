.tab-stack.menu-content-padding[ng-controller="StackController as stackCtrl" ng-init="stackCtrl.init()"]
	section.cardo.stack-settings.default
		header
			h2 == "Default Stack"
			p.header-description == "This will appear as a default stack in your workflows."
		article
			section
				r-notification.notification-block.invalid-version[status="'error'" title="'Invalid rollback version'" message="'The rollback version specified in your bitrise.yml is no longer available. New builds will use the current stack version. You should update your bitrise.yml accordingly.'" ng-if="stackCtrl.isRollbackVersionInBitriseYmlNoLongerAvailable()"]
				.max-width-wrapper
					p.notification.warning.stack-error[ng-if="Stack.all.indexOf(appService.stack) == -1"] == "Your current stack is invalid! Choose another stack from the list below."
					p.notification.warning.stack-error[ng-if="Stack.all.indexOf(appService.stack) != -1 && appService.availableStacks().indexOf(appService.stack) == -1"] == "Your current stack is not compatible with your current project type! Select a different stack from the list below."
					.stack-selector-wrapper
						select.mak.stack-selector[ng-model="appService.stack" ng-options="stackCtrl.stackOptionTitle(stack) for stack in stackCtrl.stackOptions()" ng-change="stackCtrl.onDefaultStackChange()"]
					.stack-info[ng-if="appService.stack.description"]
						.info-badge-wrapper  == svg("info_badge")
						.stack-info-text
							.stack-description[sanitized-markdown="appService.stack.description"]
							a.stack-info-link[ng-if="appService.stack.descriptionURLGen2AppleSilicon == undefined && stackCtrl.hasDescriptionURLForStack(appService.stack)" ng-href="{{ stackCtrl.descriptionURLForStack(appService.stack) }}" target="_blank"] == "See what software is installed on this stack"
							p.stack-info-multistack[ng-if="appService.stack.descriptionURLGen2AppleSilicon != undefined && stackCtrl.hasDescriptionURLForStack(appService.stack)"] == "See what software is installed on this stack: <a href='{{ stackCtrl.descriptionURLForStack(appService.stack) }}' target='_blank'>Intel</a> / <a href='{{ appService.stack.descriptionURLGen2AppleSilicon }}' target='_blank'>Apple Silicon</a>"
							p.stack-update-policy == "Read more about the <a href='https://devcenter.bitrise.io/en/infrastructure/build-stacks/stack-update-policy.html' target='_blank'>Stack Update Policy</a>."
					.docker-image-settings[ng-if="stackCtrl.defaultDockerImagesByStackIDs[appService.stack.id] !== undefined"]
						label.docker-image-label == "Docker image to use"
						input.docker-image[type="text" ng-model="appService.dockerImage" ng-model-options="{getterSetter: true}" placeholder="{{ stackCtrl.defaultDockerImagesByStackIDs[appService.stack.id] }}"]
			section.machine-type-settings[ng-if="stackCtrl.canShowDefaulStackMachines()"]
				h4.machine-type-header Machine type for the default stack
				div[ng-repeat="groupId in stackCtrl.getStackMachineTypeGroupIds(appService.stack.id)"]
					h5.machine-type-subheader[ng-if="appService.stack.type === 'osx' && groupId === 'apple'"]
						| macOS virtual machines (Apple Silicon)
					h5.machine-type-subheader[ng-if="appService.stack.type === 'osx' && groupId === 'intel'"]
						| macOS virtual machines (Intel)
					h5.machine-type-subheader[ng-if="appService.stack.type === 'linux' && groupId === 'gen1'"]
						| Linux machines
						.machine-type-warning[ng-if="stackCtrl.buildMachineDeprecationData && ['standard', 'elite', 'elite-xl'].indexOf(appService.defaultMachineType.id) != -1"]
							r-notification-message-with-link[message="stackCtrl.buildMachineDeprecationData.message" type="'info'" link-url="stackCtrl.buildMachineDeprecationData.linkUrl" link-text="stackCtrl.buildMachineDeprecationData.linkLabel"]
					h5.machine-type-subheader[ng-if="appService.stack.type === 'linux' && groupId === 'gen2'"]
						| Pro Linux machines
					.machine-types
						.machine-type-wrapper[ng-repeat="machineType in stackCtrl.stackMachineMap[appService.stack.id][groupId] track by machineType.id" ng-click="stackCtrl.setDefaultMachineType(machineType)" ng-class="{'selected': machineType.id == appService.defaultMachineType.id, 'not-available': !machineType.isAvailable}" class="{{ machineType.stackType }}"]
							.machine-type-icon[ng-if="machineType.cssClass == 'elite-xl'"]  == svg("elite_xl-machine-type-icon")
							.machine-type-icon[ng-if="machineType.cssClass == 'elite'"]  == svg("elite-machine-type-icon")
							.machine-type-icon[ng-if="machineType.cssClass == 'standard'"]  == svg("standard-machine-type-icon")
							.machine-type-data
								.top
									.icon-and-name-and-note
										span.stack-type-icon[ng-if="machineType.stackType == 'osx'"]  == svg("osx-stack-type-icon")
										span.stack-type-icon[ng-if="machineType.stackType == 'linux'"]  == svg("ubuntu-stack-type-icon")
										span.name[ng-bind="machineType.name"]
										span.note[ng-if="machineType.note" ng-bind="machineType.note"]
									.credit-per-min[ng-show="showMachineCreditCost"]
										span[ng-bind="machineType.creditPerMin"]
										span< credits/min
								.separator
								.bottom
									.specs
										.cpu
											span[ng-bind="machineType.cpuCount"]
											span<> @
											span[ng-bind="machineType.cpuDescription"]
										.ram[ng-bind="machineType.ram"]
					/ a.machine-type-info-link[ng-href="{{ cpuDescriptionURL }}" target="_blank"] == "Learn more about Machine types Â»"
			section.previous-version-settings
				div.input-and-label
					r-toggle[tooltip-label="stackCtrl.isDisabledRollbackVersion() ? 'Previous version is not available' : undefined" is-checked="stackCtrl.isCheckedRollbackVersion()" on-change="stackCtrl.onChangeRollbackVersion" is-disabled="stackCtrl.isDisabledRollbackVersion()"]
					label[for="use-previous-version-checkbox"] == "Use previous version"
					r-info-tooltip[label="'Enable this option if your build is failing after a Bitrise Stack Update. Your build will start slower while using rollback stack versions.'"]
				r-notification-message-with-link.notification-block.rollback-warning[type="'warning'" message="'Previous version is a rollback option we provide if your build is failing after a Stack Update. Please keep in mind that this option is only available for a limited time, usually 2-3 days after a Stack Update. Once removed, your build will run on the latest Stable Stack.'" link-url="'https://devcenter.bitrise.io/en/infrastructure/build-stacks/stack-update-policy.html#using-the-previous-version-of-a-stack'" link-text="'Learn more'" ng-if="stackCtrl.isCheckedRollbackVersion()"]
	section.cardo.stack-settings.workflow-specific
		header
			h2 == "Workflow Specific Stacks"
			p == "This will appear as a default stack in your workflows."
		article
			section.workflow[ng-repeat="workflow in stackCtrl.workflows"]
				h4.workflow-header
					strong.workflow-id[ng-bind="workflow.id"]
					span == " workflow"
				r-notification.notification-block.invalid-version[status="'error'" title="'Invalid rollback version'" message="'The rollback version specified in your bitrise.yml is no longer available. New builds will use the current stack version. You should update your bitrise.yml accordingly.'" ng-if="stackCtrl.isRollbackVersionInBitriseYmlNoLongerAvailableForWorkflow(workflow)"]
				p.notification.warning.stack-error[ng-if="Stack.all.indexOf(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) == -1"] == "Your current stack is invalid! Choose another stack from the list below."
				p.notification.warning.stack-error[ng-if="Stack.all.indexOf(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) != -1 && appService.availableStacks().indexOf(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) == -1"] == "Your current stack is not compatible with your current project type! Select a different stack from the list below."
				.max-width-wrapper
					.stack-selector-wrapper[ng-class="{'default': stackCtrl.stackGetterSetterForWorkflow(workflow)() === null}"]
						select.mak.stack-selector[ng-model="stackCtrl.stackGetterSetterForWorkflow(workflow)" ng-model-options="{getterSetter: true}" ng-options="stackCtrl.stackOptionTitle(stack) for stack in [null].concat(stackCtrl.stackOptions())"]
						label.default-stack == "default"
					.stack-info[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().description"]
						.info-badge-wrapper  == svg("info_badge")
						.stack-info-text
							.stack-description[sanitized-markdown="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().description"]
							a.stack-info-link[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().descriptionURLGen2AppleSilicon == undefined && stackCtrl.hasDescriptionURLForStack(stackCtrl.stackGetterSetterForWorkflow(workflow, true)())" ng-href="{{ stackCtrl.descriptionURLForStack(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) }}" target="_blank"] == "See what software is installed on this stack"
							p.stack-info-multistack[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().descriptionURLGen2AppleSilicon != undefined && stackCtrl.hasDescriptionURLForStack(stackCtrl.stackGetterSetterForWorkflow(workflow, true)())"] == "See what software is installed on this stack: <a href='{{ stackCtrl.descriptionURLForStack(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) }}' target='_blank'>Intel</a> / <a href='{{ stackCtrl.stackGetterSetterForWorkflow(workflow, true)().descriptionURLGen2AppleSilicon }}' target='_blank'>Apple Silicon</a>"
							p.stack-update-policy == "Read more about the <a href='https://devcenter.bitrise.io/en/infrastructure/build-stacks/stack-update-policy.html' target='_blank'>Stack Update Policy</a>."
				.machine-type-settings[ng-if="stackCtrl.canShowWorkflowStackMachines(workflow)"]
					h4.machine-type-header Machine type for the {{workflow.id}} workflow
					div[ng-repeat="groupId in stackCtrl.getStackMachineTypeGroupIds(stackCtrl.stackGetterSetterForWorkflow(workflow, true)().id)"]
						h5.machine-type-subheader[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().type === 'osx' && groupId === 'apple'"]
							| macOS virtual machines (Apple Silicon)
						h5.machine-type-subheader[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().type === 'osx' && groupId === 'intel'"]
							| macOS virtual machines (Intel)
						h5.machine-type-subheader[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().type === 'linux' && groupId === 'gen1'"]
							| Linux machines
							.machine-type-warning[ng-if="stackCtrl.buildMachineDeprecationData && ['standard', 'elite', 'elite-xl'].indexOf(stackCtrl.workflowMachineType(workflow).id) != -1"]
								r-notification-message-with-link[message="stackCtrl.buildMachineDeprecationData.message" type="'info'" link-url="stackCtrl.buildMachineDeprecationData.linkUrl" link-text="stackCtrl.buildMachineDeprecationData.linkLabel"]
						h5.machine-type-subheader[ng-if="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().type === 'linux' && groupId === 'gen2'"]
							| Pro Linux machines
						.machine-types
							.machine-type-wrapper[ng-repeat="machineType in stackCtrl.stackMachineMap[stackCtrl.stackGetterSetterForWorkflow(workflow, true)().id][groupId]" ng-click="stackCtrl.setWorkflowMachineType(machineType, workflow)" ng-class="{'selected': machineType.id == stackCtrl.workflowMachineType(workflow).id, 'not-available': !machineType.isAvailable}" class="{{ machineType.stackType }}"]
								.machine-type-icon[ng-if="machineType.cssClass == 'elite-xl'"]  == svg("elite_xl-machine-type-icon")
								.machine-type-icon[ng-if="machineType.cssClass == 'elite'"]  == svg("elite-machine-type-icon")
								.machine-type-icon[ng-if="machineType.cssClass == 'standard'"]  == svg("standard-machine-type-icon")
								.machine-type-data
									.top
										.icon-and-name-and-note
											span.stack-type-icon[ng-if="machineType.stackType == 'osx'"]  == svg("osx-stack-type-icon")
											span.stack-type-icon[ng-if="machineType.stackType == 'linux'"]  == svg("ubuntu-stack-type-icon")
											span.name[ng-bind="machineType.name"]
											span.note[ng-if="machineType.note" ng-bind="machineType.note"]
										.credit-per-min[ng-show="showMachineCreditCost"]
											span[ng-bind="machineType.creditPerMin"]
											span< credits/min
									.separator
									.bottom
										.specs
											.cpu
												span[ng-bind="machineType.cpuCount"]
												span<> @
												span[ng-bind="machineType.cpuDescription"]
											.ram[ng-bind="machineType.ram"]
							/ a.machine-type-info-link[ng-href="{{ cpuDescriptionURL }}" target="_blank"] == "Learn more about Machine types Â»"
					.previous-version-settings.workflow-specific
						div.input-and-label
							r-toggle[tooltip-label="stackCtrl.isDisabledRollbackVersionForWorkflow(workflow) ? 'Previous version is not available' : undefined" is-checked="stackCtrl.isCheckedRollbackVersionForWorkflow(workflow.id)" on-change="stackCtrl.onChangeRollbackVersionForWorkflow" list-item-id="workflow.id" is-disabled="stackCtrl.isDisabledRollbackVersionForWorkflow(workflow)"]
							label[for="use-previous-version-checkbox"] == "Use previous version"
							r-info-tooltip[label="'Enable this option if your build is failing after a Bitrise Stack Update. Your build will start slower while using rollback stack versions.'"]
						r-notification-message-with-link.notification-block.rollback-warning[type="'warning'" message="'Previous version is a rollback option we provide if your build is failing after a Stack Update. Please keep in mind that this option is only available for a limited time, usually 2-3 days after a Stack Update. Once removed, your build will run on the latest Stable Stack.'" link-url="'https://devcenter.bitrise.io/en/infrastructure/build-stacks/stack-update-policy.html#using-the-previous-version-of-a-stack'" link-text="'Learn more'" ng-if="stackCtrl.isCheckedRollbackVersionForWorkflow(workflow.id)"]

