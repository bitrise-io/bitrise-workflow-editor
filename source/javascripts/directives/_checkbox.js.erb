(function() {
	

	angular.module("BitriseWorkflowEditor").directive("checkbox", function() {
		const inheritedAttributes = [
			"ng-model",
			"ng-model-options",
			"ng-change",
			"ng-checked",
			"ng-disabled"
		];

		return {
			restrict: "E",
			replace: true,
			transclude: false,
			priority: 1000000,
			template(tElement, tAttrs) {
				const parentElement = angular.element("<div></div>");
				$(parentElement).addClass("checkbox");

				const inputCheckboxElement = angular.element(
					"<input type='checkbox'></input>"
				);
				_.each(inheritedAttributes, function(anAttribute) {
					inputCheckboxElement.attr(anAttribute, tElement.attr(anAttribute));
				});
				inputCheckboxElement.attr(
					"id",
					`{{${  tAttrs.checkboxIdExpression  }}}`
				);

				$(parentElement).append(inputCheckboxElement);

				const checkboxSVGWrapperElement = angular.element("<div></div>");
				$(checkboxSVGWrapperElement).addClass("checkbox-svg-wrapper");
				$(parentElement).append(checkboxSVGWrapperElement);

				const checkElement = angular.element(
					'<%= svg("check").split("\n").join("").split("\r").join("").split("\t").join("") %>'
				);
				$(checkElement).attr("check", "");
				$(checkboxSVGWrapperElement).append(checkElement);

				const crossElement = angular.element(
					'<%= svg("cross").split("\n").join("").split("\r").join("").split("\t").join("") %>'
				);
				$(crossElement).attr("cross", "");
				$(checkboxSVGWrapperElement).append(crossElement);

				return parentElement.prop("outerHTML");
			},
			link(scope, element) {
				_.each(inheritedAttributes, function(anAttribute) {
					$(element).removeAttr(anAttribute);
				});
			}
		};
	});
})();
