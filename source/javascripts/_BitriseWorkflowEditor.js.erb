window.serviceVersion = "<%= ENV['wfe_version'] %>";
window.datadogApiKey = "<%= data[:constants][:datadog][:apiKey] %>";
window.isAnalyticsOn = <%= analytics? %>;
window.mode = "<%= mode %>";

(function () {
  "use strict";

  var BitriseWorkflowEditor = angular.module("BitriseWorkflowEditor", [
    "ngRoute",
    "ngSanitize",
    "ngAnimate",
    "ngCookies",
    "monospaced.elastic",
    "ng-showdown"
  ]);

  BitriseWorkflowEditor.config(function ($compileProvider, $qProvider) {
    $compileProvider.debugInfoEnabled(<%= ENV['NODE_ENV'] == 'development' %>);
    $qProvider.errorOnUnhandledRejections(false);
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|blob|itms-services):/);
  });

  BitriseWorkflowEditor.config(function ($animateProvider) {
    $animateProvider.classNameFilter(/angular-animated/);
  });

  BitriseWorkflowEditor.config(function ($routeProvider) {
    $routeProvider.when("/<%= data[:routes][:endpoints][:workflows] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:workflows]) %>",
      reloadOnSearch: false
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:pipelines] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:pipelines]) %>",
      reloadOnSearch: false
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:code_signing] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:code_signing]) %>"
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:secrets] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:secrets] )%>"
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:env_vars] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:env_vars] )%>"
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:triggers] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:triggers]) %>",
      reloadOnSearch: false
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:stack] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:stack]) %>",
      reloadOnSearch: false
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:licenses] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:licenses]) %>",
      reloadOnSearch: false
    });

    $routeProvider.when("/<%= data[:routes][:endpoints][:yml] %>", {
      templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:yml]) %>"
    });
  });

  BitriseWorkflowEditor
    .constant("SERVICE_NAME", 'workflow-editor')
    .constant("DATADOG_API_KEY", window.datadogApiKey)
    .constant("IS_ANALYTICS", window.isAnalyticsOn);

  BitriseWorkflowEditor.config([
    "$httpProvider",
    function ($httpProvider) {
      $httpProvider.defaults.xsrfCookieName = "CSRF-TOKEN";
      $httpProvider.defaults.xsrfHeaderName = "X-CSRF-TOKEN";
    }
  ]);

  <% if mode == "website" %>
  <% if prod? %>
  BitriseWorkflowEditor.config(function ($sceDelegateProvider) {
    $sceDelegateProvider.resourceUrlWhitelist([
      "self",
      // Prevent CORS issues on staging, when WFE runs under a different host
      "https://app.bitrise.io/**",
      "https://workflow-editor-cdn.bitrise.io/**"
    ]);
  });
  <% else %>
  BitriseWorkflowEditor.config(function ($sceDelegateProvider) {
    $sceDelegateProvider.resourceUrlWhitelist([
      "self",
      // Prevent CORS issues in local dev environment
      "http://localhost:4000/**",
      "https://workflow-editor-cdn.bitrise.io/**"
    ]);
  });
  <% end %>
  <% end %>

  <% if mode == "website" %>
  BitriseWorkflowEditor.run(function (requestService) {
    if (!!window.analytics) {
      requestService.getCurrentUserData()
        .then(function (user) {
          window.analytics && window.analytics.identity(user.dataId);
        });
    }
  });
  <% end %>
})();
