const colors = [
	"#68442c",
	"#86d641",
	"#a775db",
	"#df5ac3",
	"#46bee8",
	"#63c99a",
	"#19937c",
	"#ed544c",
	"#ff931e",
	"#107ec1",
	"#48e1ed",
	"#743da5",
	"#f9d128",
	"#ff931e",
	"#9e4b39",
	"#b51c98",
	"#b20202",
	"#bf8a66",
	"#2c3f50",
	"#441f62",
	"#0c5b4c",
	"#391401",
	"#27ae61",
	"#ef7bef"
];

angular
	.module("BitriseWorkflowEditor")
	.filter("backgroundImagePropertyValue", function () {
		return function (url) {
			return `url('${url}')`;
		};
	});

angular
	.module("BitriseWorkflowEditor")
	.filter("projectTypeCSSClass", function () {
		return function (projectType) {
			switch (projectType) {
				case "ios":
					return "ios";
				case "osx":
					return "osx";
				case "macos":
					return "macos";
				case "android":
					return "android";
				case "xamarin":
					return "xamarin";
				case "cordova":
					return "cordova";
				case "ionic":
					return "ionic";
				case "react-native":
					return "react-native";
				case "flutter":
					return "flutter";
				case "other":
					return "other";
			}
		};
	});

angular.module("BitriseWorkflowEditor").filter("appAvatarURL", function () {
	return function (url) {
		if (!url || typeof url !== "string" || url.length === 0) {
			return "";
		}

		return `url('${url}')`;
	};
});

angular.module("BitriseWorkflowEditor").filter("colorFromString", function () {
	return function (string) {
		let pseudoRandom = 0;

		if (typeof string === 'string' && string.length > 0) {
			for (let i = 0; i < string.length; i++) {
				pseudoRandom += string.charCodeAt(i);
			}
		}

		return colors[pseudoRandom % colors.length];
	};
});

angular
	.module("BitriseWorkflowEditor")
	.filter("shorthandFromString", function () {
		return function (string) {
			if (string === null || string === undefined) {
				return "??";
			}

			string = string.toString();

			if (string.length === 0) {
				return "??";
			}

			string = string.toUpperCase();

			return string[0] + string.slice(-1);
		};
	});
