(function () {
  "use strict";

  angular
    .module("BitriseWorkflowEditor")
    .controller("SecretsController", function (
      $scope,
      $rootScope,
      $q,
      $timeout,
      requestService,
      stringService,
      dateService,
      appService,
      Progress,
      Variable,
      Popup
    ) {
      var viewModel = this;

      $scope.appService = appService;
      $scope.Variable = Variable;
      $scope.requestService = requestService;
      viewModel.newSecret;

      $scope.$on(
        "$destroy",
        $rootScope.$on("MainController::cleanupMenu", function () {
          if (viewModel.newSecret) {
            viewModel.deleteSecret(viewModel.newSecret);
          }
        })
      );

      viewModel.init = function () {
        configure();
      };

      function configure() {
        _.each(appService.secrets, function (aSecret) {
          aSecret.customProperties.progress = new Progress();
          aSecret.customProperties.isEditMode = false;
        });

        viewModel.setSecretsForReact();
      }

      viewModel.setSecretsForReact = function () {
        viewModel.secretsForReact = appService.secrets.map((variable) => ({
          key: variable.key(),
          value: variable.value(),
          isProtected: variable.isProtected(),
          isExpand: Boolean(variable.isExpand()),
          isExpose: variable.isExpose(),
          isKeyChangeable: variable.isKeyChangeable,
          isShared: variable.scope() === 'workspace'
        }))
      }

      viewModel.addToSecrets = function () {
        viewModel.newSecret = new Variable(
          {
            "": ""
          },
          Variable.defaultVariableConfig()
        );
        viewModel.newSecret.isExpand(false);

        viewModel.newSecret.customProperties.progress = new Progress();
        appService.secrets.push(viewModel.newSecret);

        viewModel.toggleEditModeForSecret(viewModel.newSecret, true);
      };

      viewModel.secretModelsChangeOccured = function () {
        if (!appService.secretsHaveUnsavedChanges()) {
          return;
        }

        if (viewModel.newSecret && appService.secrets.length != appService.savedSecrets.length) {
          return;
        }

        appService.saveSecrets().then(
          function () {
            viewModel.setSecretsForReact();
          },
          function (error) {
            Popup.showErrorPopup(error.message);

            appService.discardSecretsChanges();
          }
        );
      };

      viewModel.saveSecretsFromReact = function (secretsFromReact) {
        // delete the ones that got removed.
        appService.secrets = appService.secrets.filter((secret) => {
          // leave workspace secrets intact
          if (secret.scope() === 'workspace') return true;

          // remove the ones that are not in the react list
          return secretsFromReact.filter(s => !s.isShared).find((s) => s.key === secret.key())
        });

        // edit existing ones
        appService.secrets.forEach(secret => {
          if (secret.scope() === 'workspace') return;

          const s = secretsFromReact.find((s) => s.key === secret.key() && !s.isShared);

          if (s) {
            secret.value(s.value);
            secret.isProtected(s.isProtected);
            secret.isExpose(s.isExpose);
            secret.isExpand(s.isExpand);
            secret.isKeyChangeable = s.isKeyChangeable;
          }

          return secret;
        });

        // add new ones
        secretsFromReact.forEach(secret => {
          if (secret.isShared) return;

          const existingSecret = appService.secrets
            .filter(s => s.scope() !== 'workspace')
            .filter(s => {
              return s.key() === secret.key;
            });

          if (!existingSecret.length) {
            let newVariable = new Variable(
              {
                "": ""
              },
              Variable.defaultVariableConfig()
            )

            newVariable.key(secret.key);
            newVariable.value(secret.value);
            newVariable.isProtected(secret.isProtected);
            newVariable.isExpose(secret.isExpose);
            newVariable.isExpand(secret.isExpand);

            appService.secrets.push(newVariable);
          }
        });

        viewModel.secretModelsChangeOccured();
      }

      viewModel.secretHasUnsavedOptsChanges = function (secret) {
        secret.customProperties.isChanged = !angular.equals(
          secret.customProperties.savedUserVariableConfig.opts,
          secret.userVariableConfig.opts
        );
      };

      viewModel.toggleEditModeForSecret = function (
        secret,
        shouldEnterEditMode
      ) {
        if (
          viewModel.newSecret &&
          ((secret == viewModel.newSecret && !shouldEnterEditMode) ||
            (secret != viewModel.newSecret && shouldEnterEditMode))
        ) {
          var index = _.indexOf(appService.secrets, viewModel.newSecret);
          appService.secrets.splice(index, 1);

          viewModel.newSecret = null;
        }

        _.each(appService.secrets, function (aSecret) {
          if (!aSecret.customProperties.savedUserVariableConfig) {
            aSecret.customProperties.savedUserVariableConfig = angular.copy(
              aSecret.userVariableConfig
            );
          }

          aSecret.userVariableConfig = angular.copy(
            aSecret.customProperties.savedUserVariableConfig
          );
          aSecret.reconfigureMeta();
          aSecret.customProperties.isEditMode = false;
        });

        if (shouldEnterEditMode) {
          secret.customProperties.savedUserVariableConfig = angular.copy(
            secret.userVariableConfig
          );
          secret.customProperties.isEditMode = true;
        }

        viewModel.valueVisibilityGetterSetterForSecret(secret)(
          shouldEnterEditMode
        );
      };

      viewModel.saveSecret = function (secret) {
        secret.customProperties.progress.start(
          "<%= data[:strings][:env_vars][:secrets][:save][:in_progress] %>"
        );

        $q.all([
          appService.saveSecrets(),
          $timeout(function () {
          }, dateService.defaultSaveDelayDurationInMilliseconds)
        ]).then(
          function () {
            secret.customProperties.progress.success();

            if (secret == viewModel.newSecret) {
              viewModel.newSecret = null;
            }

            secret.customProperties.savedUserVariableConfig = angular.copy(
              secret.userVariableConfig
            );
            secret.customProperties.isEditMode = false;

            viewModel.setSecretsForReact();
          },
          function (error) {
            secret.customProperties.progress.error(error);
          }
        );
      };

      viewModel.deleteSecret = function (secret) {
        if (secret == viewModel.newSecret) {
          var index = _.indexOf(appService.secrets, viewModel.newSecret);
          appService.secrets.splice(index, 1);

          viewModel.newSecret = null;

          return;
        }

        Popup.showConfirmPopup(
          "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_question] %>",
          "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_details] %>",
          "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_ok] %>",
          "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_cancel] %>"
        ).then(function () {
          var index = _.indexOf(appService.secrets, secret);
          appService.secrets.splice(index, 1);

          appService.saveSecrets().then(
            function () {
              secret.customProperties.isEditMode = false;
            },
            function (error) {
              appService.secrets.splice(index, 0, secret);

              Popup.showErrorPopup(error.message);
            }
          );
        });
      };

      viewModel.secretValidationWarning = function (secret, keyUniquenessScope) {
        var errors = [];

        if (!Variable.isValidKey(secret.key(), keyUniquenessScope)) {
          errors.push(
            new Error("<%= data[:strings][:env_vars][:invalid_env_var_key] %>")
          );

          if (keyUniquenessScope) {
            errors.push(
              new Error("<%= data[:strings][:env_vars][:should_be_unique] %>")
            );
          }
        }

        return errors.length > 0
          ? stringService.errorMessageFromErrors(errors)
          : null;
      };

      viewModel.valueVisibilityGetterSetterForSecret = function (secret) {
        return function (shouldShowValue) {
          if (shouldShowValue !== undefined) {
            if (
              shouldShowValue &&
              !secret.isProtected() &&
              !secret.customProperties.progress.isInProgress
            ) {
              viewModel.getSecretValue(secret);
            }

            secret.shouldShowValue = shouldShowValue;
          }

          return secret.shouldShowValue;
        };
      };

      viewModel.getSecretValue = function (secret) {
        secret.customProperties.progress.start(
          "<%= data[:strings][:env_vars][:get_secret_env_value_progress][:in_progress] %>"
        );

        appService.getSecretValue(secret).then(
          function () {
            secret.customProperties.progress.success();
          },
          function (error) {
            secret.customProperties.progress.error(error);
          }
        );
      }

      viewModel.valueGetterSetterForSecret = function (secret) {
        return function (value) {
          if (secret.value() !== null) {
            if (secret.shouldShowValue === true) {
              if (secret.isProtected()) {
                if (secret.customProperties.isEditMode === true) {
                  if (value) {
                    return secret.value(value);
                  } else {
                    return secret.value();
                  }
                }
              } else {
                return secret.value(value);
              }
            }
          } else {
            if (secret.shouldShowValue === true) {
              if (secret.isProtected()) {
                if (secret.customProperties.isEditMode === true) {
                  if (value) {
                    return secret.value(value);
                  } else {
                    return undefined;
                  }
                }
              } else {
                if (secret.customProperties.isEditMode === true) {
                  return secret.value(value);
                }
              }
            }
          }

          return "******";
        };
      };

      viewModel.makeSecretProtected = function (secret) {
        Popup.showConfirmPopup(
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_question] %>",
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_details] %>",
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_ok] %>",
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_cancel] %>"
        ).then(function () {
          var originalShouldShowValue = secret.shouldShowValue;
          var originalIsKeyChangeable = secret.isKeyChangeable;
          var originalIsProtected = secret.isProtected();

          secret.shouldShowValue = false;
          secret.isKeyChangeable = false;
          secret.isProtected(true);

          appService.saveSecrets().then(
            function () {
              secret.customProperties.savedUserVariableConfig = angular.copy(
                secret.userVariableConfig
              );
              secret.customProperties.isEditMode = false;
            },
            function (error) {
              secret.shouldShowValue = originalShouldShowValue;
              secret.isKeyChangeable = originalIsKeyChangeable;
              secret.isProtected(originalIsProtected);

              Popup.showErrorPopup(error.message);
            }
          );
        });
      };

      viewModel.makeSecretProtectedForReact = function (secret) {
        viewModel.makeSecretProtected(appService.secrets.find((s) => s.key() === secret.key));
      }

    });
})();
