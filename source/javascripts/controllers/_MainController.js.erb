import _ from "underscore";
import datadogRumCustomTiming from "../utils/datadogCustomRumTiming.ts";
import { safeDigest } from "@/services/react-compat";

(function () {
  "use strict";

  angular
    .module("BitriseWorkflowEditor")
    .controller("MainController", function (
      $scope,
      $rootScope,
      $q,
      $location,
      $timeout,
      $cookies,
      requestService,
      appService,
      stringService,
      dateService,
      osService,
      Progress,
      Popup,
      Stack,
      appServiceUtil,
      logger,
      MachineType,
      launchDarklyService
    ) {
      var viewModel = this;

      var originalOnbeforeunloadHandler = window.onbeforeunload;

      $scope.appService = appService;
      $scope.requestService = requestService;
      $scope.osService = osService;

      viewModel.isUpdateConfigurationDialogOpen = false;
      viewModel.appConfigYML = undefined;
      viewModel.defaultBranch = "";
			viewModel.gitRepoSlug = "";
      viewModel.appDetails;
      viewModel.showSharedSecrets = false;
      viewModel.menus = _.compact([
        {
          id: "workflows",
          title: "<%= data[:strings][:main][:menus][:workflows] %>",
          path: "<%= data[:routes][:endpoints][:workflows] %>",
          possibleURLParameterKeys: ["workflow_id"],
          cssClass: "workflows"
        },
        {
          id: "pipelines",
          title: "Pipelines",
          path: "pipelines",
          possibleURLParameterKeys: ["pipeline"],
          cssClass: "pipelines"
        },
        {
          id: "secrets",
          title: "<%= data[:strings][:main][:menus][:secrets] %>",
          path: "<%= data[:routes][:endpoints][:secrets] %>",
          possibleURLParameterKeys: [],
          cssClass: "secrets"
        },
        {
          id: "env-vars",
          title: "<%= data[:strings][:main][:menus][:env_vars] %>",
          path: "<%= data[:routes][:endpoints][:env_vars] %>",
          possibleURLParameterKeys: [],
          cssClass: "env-vars"
        },
        {
          id: "triggers",
          title: "<%= data[:strings][:main][:menus][:triggers] %>",
          path: "<%= data[:routes][:endpoints][:triggers] %>",
          possibleURLParameterKeys: ["trigger_type"],
          cssClass: "triggers"
        },
        requestService.mode == "website"
          ? {
            id: "stack",
            title: "<%= data[:strings][:main][:menus][:stack] %>",
            path: "<%= data[:routes][:endpoints][:stack] %>",
            possibleURLParameterKeys: [],
            cssClass: "stack"
          }
          : null,
        requestService.mode == "website"
          ? {
            id: "licenses",
            title: "<%= data[:strings][:main][:menus][:licenses] %>",
            path: "<%= data[:routes][:endpoints][:licenses] %>",
            possibleURLParameterKeys: [],
            cssClass: "hidden"
          }
          : null,
        {
          id: "yml",
          title: "<%= data[:strings][:main][:menus][:yml] %>",
          path: "<%= data[:routes][:endpoints][:yml] %>",
          possibleURLParameterKeys: [],
          cssClass: "yml",
          divided: true
        }
      ]);
      viewModel.menuProgress = new Progress();
      viewModel.currentMenu;
      viewModel.tourIds = ["menu-nav", "workflow-main-toolbar", "steps-container"];


      viewModel.loadDataProgress = new Progress();
      viewModel.saveProgress = new Progress();
      viewModel.changeMenuProgress = new Progress();
      viewModel.initAppProgress = new Progress();

      viewModel.shouldAllowYMLMenuWithoutDiscard = false;
      viewModel.currentUser;
      viewModel.lastWorkflowEditedDate;

      viewModel.isFirstBuildExperienceEnabled = false;

      $scope.$on("$locationChangeSuccess", function (event, next, current) {
        $timeout(function () {
          viewModel.changeMenuProgress.success();
          if (window !== window.parent && window.parent && next !== current) {
            window.parent.location.hash = new URL(next).hash;
          }
        }, 0);
      });

      function selectInitialMenu() {
        var initialMenu = _.find(viewModel.menus, function (aMenu) {
          return "/" + aMenu.path == $location.path();
        });
        if (!initialMenu || !viewModel.isMenuEnabled(initialMenu)) {
          initialMenu = _.find(viewModel.menus, function (menu) {
            return viewModel.isMenuEnabled(menu);
          });
        }

        viewModel.menuSelected(initialMenu);
      }

      function load() {
        viewModel.loadDataProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

        $q(function (resolve, reject) {
          switch (viewModel.currentMenu.id) {
            case "pipelines":
              appService.getAppConfig().then(() => {
                if (requestService.isWebsiteMode()) {
                  return Stack.getAll().then(appService.getStackAndDockerImage);
                }
              }).then(resolve, reject);

              break;
            case "workflows":
            case "env-vars":
            case "triggers":
              var loadPromises = [appService.getAppConfig()];
              if (requestService.isWebsiteMode()) {
                loadPromises.push(Stack.getAll());
                loadPromises.push(appService.getPipelineConfig());
                loadPromises.push(launchDarklyService.initialize());
              }
              var loadPromise = $q.all(loadPromises);
              if (requestService.isWebsiteMode()) {
                loadPromise = loadPromise.then(appService.getStackAndDockerImage).then(() => {
                  if (appService.appDetails.isMachineTypeSelectorAvailable) {
                    return MachineType.getAll().then(appService.getDefaultMachineType);
                  }
                });
              }

              loadPromise.then(
                function () {
                  $q(function (deprecatedTriggerCheckResolve, deprecatedTriggerCheckReject) {
                    if (appService.appConfigHasDeprecatedTriggerMap()) {
                      appService.updateDeprecatedTriggerMap();

                      Popup.showNoticePopup("<%= data[:strings][:triggers][:update_deprecated_popup][:title] %>", [
                        "<%= data[:strings][:triggers][:update_deprecated_popup][:details_1] %>",
                        "<%= replaced_string(data[:strings][:triggers][:update_deprecated_popup][:details_2], [data[:routes][:blog][:new_triggers]])%>"
                      ])
                        .then(function () {
                          return requestService.isWebsiteMode() && appService.pipelineConfig.usesRepositoryYml
                            ? $q.when()
                            : viewModel.save();
                        })
                        .then(deprecatedTriggerCheckResolve, deprecatedTriggerCheckReject);
                    } else {
                      deprecatedTriggerCheckResolve();
                    }
                  }).then(
                    function () {
                      resolve();
                    },
                    function (error) {
                      reject(error);
                    }
                  );
                },
                function (error) {
                  reject(error);
                }
              );

              break;
            case "licenses":
              var loadPromises = [appService.getAppConfig(), appService.getPipelineConfig(), appService.getPublicApiToken()];

              var loadPromise = $q.all(loadPromises);

              loadPromise.then(
                function () {
                  resolve();
                },
                function (error) {
                  reject(error);
                }
              );

              break;
            case "code-signing":
              resolve();
            case "secrets":
              appService.getSecrets().then(resolve, reject);

              break;
            case "stack":
              appService.getAppConfigYML();
              $q.all([appService.getAppConfig(), appService.getPipelineConfig(), Stack.getAll()])
                .then(appService.getStackAndDockerImage)
                .then(function () {
                  if (appService.appDetails.isMachineTypeSelectorAvailable) {
                    return MachineType.getAll().then(appService.getDefaultMachineType);
                  }
                })
                .then(resolve, reject);

              break;
            case "yml":
              appService.getAppConfigYML().then(
                function () {
                  resolve();
                },
                function (response) {
                  if (response.bitriseYml) {
                    reject(response.error);
                  } else {
                    reject(response);
                  }
                }
              );

              break;
          }
        }).then(
          function () {
            viewModel.loadDataProgress.success();
          },
          function (error) {
            viewModel.loadDataProgress.error(error);

            viewModel.shouldAllowYMLMenuWithoutDiscard = true;
          }
        );
      }

      viewModel.menuSelected = function (menu) {
        if (menu === viewModel.currentMenu) {
          return;
        }

        viewModel.menuProgress.start("Loading, wait a sec...");

        var shouldCallLoadAfterMenuChange = true;

        $q(function (resolve, reject) {
          if (!viewModel.currentMenu) {
            resolve();

            return;
          }

          var menuIDsByHandledSource = [["workflows", "pipelines", "env-vars", "triggers"], ["secrets"], ["stack"], ["licenses"], ["yml"]];

          if (
            _.find(menuIDsByHandledSource, function (menuIDsOfSource) {
              return _.contains(menuIDsOfSource, viewModel.currentMenu.id);
            }) ==
            _.find(menuIDsByHandledSource, function (menuIDsOfSource) {
              return _.contains(menuIDsOfSource, menu.id);
            })
          ) {
            shouldCallLoadAfterMenuChange = false;

            resolve();

            return;
          }

          cleanupMenu();

          if (!viewModel.hasUnsavedChanges()) {
            resolve();

            return;
          }

          if (viewModel.shouldAllowYMLMenuWithoutDiscard) {
            viewModel.shouldAllowYMLMenuWithoutDiscard = false;

            resolve();

            return;
          }

          Popup.showConfirmPopup(
            "<%= data[:strings][:main][:confirm_tab_change_save_popup][:title] %>",
            "<%= data[:strings][:main][:confirm_tab_change_save_popup][:details] %>",
            "<%= data[:strings][:main][:confirm_tab_change_save_popup][:save] %>",
            "<%= data[:strings][:main][:confirm_tab_change_save_popup][:cancel] %>",
            function () {
              viewModel.save(true).then(
                function () {
                  resolve();
                },
                function (error) {
                  reject();
                }
              );
            },
            function () {
              reject();
            }
          );
        }).then(
          function () {
            logger.setTags({ menuID: menu.id });

            _.each(_.without(viewModel.menus, menu), function (aMenu) {
              _.each(aMenu.possibleURLParameterKeys, function (aMenuURLParameterKey) {
                if (!_.contains(menu.possibleURLParameterKeys, aMenuURLParameterKey)) {
                  $location.search(aMenuURLParameterKey, null).replace();
                }
              });
            });

            var isInitialSelection = !viewModel.currentMenu;
            if (isInitialSelection && requestService.mode == "website") {
              history.pushState(
                {
                  eventID: "backButtonPressedOnInitialWorkflowEditorPage"
                },
                ""
              );
            }

            viewModel.currentMenu = menu;
            if ($location.path() != "/" + menu.path) {
              $location.path("/" + menu.path).replace();
            }

            if (!isInitialSelection) {
              viewModel.changeMenuProgress.start("<%= data[:strings][:main][:load_menu_progress][:loading] %>");
            }

            if (shouldCallLoadAfterMenuChange) {
              load();
            }

            viewModel.menuProgress.success();

            datadogRumCustomTiming("wfe", "topNavigation");
          },
          function () {
            viewModel.menuProgress.reset();
          }
        );
      };

      $scope.$on("$routeChangeError", function (event, current, previous, rejection) {
        viewModel.menuProgress.error(new Error("<%= data[:strings][:main][:load_menu_progress][:load_error] %>"));
        logger.error(rejection);
      });

      viewModel.isDiscardSaveAvailable = function () {
        if (!viewModel.currentMenu) {
          return undefined;
        }

        switch (viewModel.currentMenu.id) {
          case "secrets":
          case "code-signing":
            return false;
          default:
            return true;
        }
      };

      function cleanupMenu() {
        if (viewModel.currentMenu?.id == "secrets") {
          $rootScope.$emit("MainController::cleanupMenu");
        }
      }

      viewModel.hasUnsavedChanges = function () {
        if (!viewModel.currentMenu) {
          return undefined;
        }

        switch (viewModel.currentMenu.id) {
          case "workflows":
          case "env-vars":
          case "triggers":
            return appService.appConfigHasUnsavedChanges();
          case "secrets":
            return appService.secretsHaveUnsavedChanges();
          case "stack":
            return (
              appService.appConfigHasUnsavedChanges() ||
              appService.stackHasUnsavedChanges() ||
              appService.defaultMachineTypeHasUnsavedChanges() ||
              appService.rollbackVersionHasUnsavedChanges()
            );
          case "licenses":
            return appService.appConfigHasUnsavedChanges();
          case "yml":
            return appService.appConfigYMLHasUnsavedChanges();
        }
      };

      window.onload = function () {
        if (requestService.mode == "cli") {
          requestService.cancelAPIConnectionClose();
        }
      };

      window.onbeforeunload = function (event) {
        cleanupMenu();

        if (viewModel.hasUnsavedChanges()) {
          return "<%= data[:strings][:main][:tab_close_confirm_message] %>";
        }

        if (originalOnbeforeunloadHandler) {
          originalOnbeforeunloadHandler(event);
        }
      };

      window.onpopstate = function (event) {
        if (event.state && event.state.eventID == "backButtonPressedOnInitialWorkflowEditorPage") {
          window.location.replace();

          return;
        }
      };

      viewModel.closeUpdateConfigurationDialog = function () {
        $timeout(function () {
          viewModel.isUpdateConfigurationDialogOpen = false;
        }, 0);

        viewModel.deferredUserSavedYmlToRepository.reject();
      };

      viewModel.onSaveToRepoComplete = function () {
        $timeout(function () {
          viewModel.closeUpdateConfigurationDialog();
        }, 1500);

        viewModel.deferredUserSavedYmlToRepository.resolve();
      };

      function reloadAppConfig() {
        viewModel.loadDataProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");
        return appService.getAppConfig(true).then(function () {
          viewModel.loadDataProgress.reset();
        });
      }

      function reloadStack() {
        viewModel.loadDataProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");
        return appService
          .getAppConfig(true)
          .then(function () {
            appService.getStackAndDockerImage(true);
          })
          .then(function () {
            viewModel.loadDataProgress.reset();
          });
      }

      function reloadAppConfigYML() {
        viewModel.loadDataProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");
        return appService.getAppConfigYML(true).then(function () {
          viewModel.loadDataProgress.reset();
        });
      }

      function updateLastWorkflowMetadata() {
        const appSlug = appService.appDetails.slug;
        const dateToday = new Date().toString();

        requestService.updateCurrentUserMetadata({
          "last_workflow_edited_date": dateToday,
          "last_workflow_edited_app": appSlug
        })
          .then(function () {
            viewModel.lastWorkflowEditedDate = dateToday;
          });
      }

      viewModel.getDataToSave = function () {
        return viewModel.dataToSave;
      };

      viewModel.save = function (shouldReturnPromise) {
        if (shouldReturnPromise === undefined) {
          shouldReturnPromise = false;
        }

        viewModel.saveProgress.start("<%= data[:strings][:main][:load_progress][:saving] %>");

        if (requestService.isWebsiteMode() && appService.pipelineConfig.usesRepositoryYml) {
          viewModel.deferredUserSavedYmlToRepository = $q.defer();
          viewModel.deferredUserSavedYmlToRepository.promise.finally(undefined, function (signal) {
            if (signal === 'open-update-configuration-dialog') {
              viewModel.isUpdateConfigurationDialogOpen = true;
            }
          });
        }

        var promise = $q
          .all([
            $q(function (resolve, reject) {
              switch (viewModel.currentMenu.id) {
                case "workflows":
                case "env-vars":
                case "triggers":
                case "licenses":
                  viewModel.dataToSave = appService.appConfig;
                  return appService
                    .saveAppConfig(viewModel.deferredUserSavedYmlToRepository, viewModel.currentMenu.id)
                    .then(function () {
                      return requestService.isWebsiteMode() && appService.pipelineConfig.usesRepositoryYml
                        ? reloadAppConfig()
                        : $q.when();
                    })
                    .then(resolve, reject);
                case "secrets":
                  return appService.saveSecrets(viewModel.appSecretsWriteNew).then(resolve, reject);
                case "stack":
                  viewModel.dataToSave = appService.appConfig;
                  var machineTypeUpdated = appService.defaultMachineTypeHasUnsavedChanges();

                  return appService
                    .saveStackAndDockerImage(viewModel.deferredUserSavedYmlToRepository, viewModel.currentMenu.id)
                    .then(function () {

                      return requestService.isWebsiteMode() && appService.pipelineConfig.usesRepositoryYml
                        ? reloadStack()
                        : $q.when();
                    })
                    .then(resolve, reject);
                case "yml":
                  viewModel.appConfigYML = appService.appConfigYML;
                                    return appService
                    .saveAppConfigYML(viewModel.deferredUserSavedYmlToRepository)
                    .then(function () {
                      return requestService.isWebsiteMode() && appService.pipelineConfig.usesRepositoryYml
                        ? reloadAppConfigYML()
                        : $q.when();
                    })
                    .then(resolve, reject);
              }
            }),
            $timeout(function () {
            }, dateService.defaultSaveDelayDurationInMilliseconds)
          ])
          .then(
            function () {
              viewModel.saveProgress.reset();
              $rootScope.$emit("MainController::savedFinishedWithSuccess");
              updateLastWorkflowMetadata();
            },
            function (error) {
              viewModel.saveProgress.reset();
              $rootScope.$emit("MainController::savedFinishedWithError");
              Popup.showErrorPopup("<%= data[:strings][:main][:load_progress][:save_error] %>", error.message);

              if (shouldReturnPromise) {
                return $q.reject(error);
              }
            }
          );

        if (shouldReturnPromise) {
          return promise;
        }
      };

      viewModel.isSaveEnabled = function () {
        if (!viewModel.menuProgress.isIdle) {
          return false;
        }

        if (viewModel.loadDataProgress.isInProgress) {
          return false;
        }

        if (viewModel.saveProgress.isInProgress) {
          return false;
        }

        if (!viewModel.hasUnsavedChanges()) {
          return false;
        }

        return true;
      };

      $(document).on("keydown", function (event) {
        if ((event.ctrlKey || event.metaKey) && event.which == 83) {
          event.preventDefault();

          if (viewModel.isSaveEnabled()) {
            viewModel.save();
          }

          return false;
        }
      });

      viewModel.discardChangesSelected = function () {
        switch (viewModel.currentMenu.id) {
          case "workflows":
          case "env-vars":
          case "triggers":
            appService.discardAppConfigChanges();

            break;
          case "secrets":
            appService.discardSecretsChanges();

            break;
          case "licenses":
            appService.discardAppConfigChanges();

            break;
          case "stack":
            appService.discardAppConfigChanges();
            appService.discardStackChanges();
            appService.discardDefaultMachineTypeChanges();

          case "yml":
            appService.discardAppConfigYMLChanges();

            break;
        }

        $rootScope.$emit("MainController::changesDiscarded");
        safeDigest($scope);
      };

      viewModel.selectMenuByID = function (menuID) {
        var selectedMenu = _.find(viewModel.menus, {
          id: menuID
        });

        if (!selectedMenu) {
          selectedMenu = _.find(viewModel.menus, {
            id: "workflows"
          });
        }

        viewModel.menuSelected(selectedMenu);
      };

      viewModel.breadCrumbsAccountPath = function () {
        if (
          !appService.appDetails ||
          appService.appDetails.ownerData === undefined ||
          appService.appDetails.ownerData.slug === undefined
        ) {
          return undefined;
        }

        if (appService.appDetails.ownerData.type == "User") {
          if (appService.appDetails.isCurrentUserOwner) {
            return "<%= webserver_path(data[:routes][:website][:dashboard_path]) %>#?only_direct=true";
          } else {
            return (
              "<%= webserver_path(data[:routes][:website][:dashboard_path]) %>#?user_slug=" +
              appService.appDetails.ownerData.slug
            );
          }
        }

        if (appService.appDetails.ownerData.type == "Organization") {
          return (
            "<%= webserver_path(data[:routes][:website][:dashboard_path]) %>#?organization_slug=" +
            appService.appDetails.ownerData.slug
          );
        }
      };

      viewModel.workspaceSecretsPath = function () {
        return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:workspace_secrets_path]) %>", {
          workspace_slug: appService.appDetails?.ownerData?.slug
        });
      };

      viewModel.workspacePlanSelectorPath = function () {
        return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:workspace_plan_selector_path]) %>", {
          workspace_slug: appService.appDetails?.ownerData?.slug
        });
      };

      viewModel.dashboardPath = function () {
        return "<%= webserver_path(data[:routes][:website][:dashboard_path]) %>";
      };

      viewModel.appPath = function () {
        return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:app_path]) %>", {
          app_slug: appService.appDetails?.slug
        });
      };

      viewModel.appCodeSigningPath = function () {
        return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:app_setting_code_signing]) %>", {
          app_slug: appService.appDetails?.slug
        });
      };

      viewModel.init = function () {
        viewModel.initAppProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

        logger.info("App start");

        appService.getAppConfig();

        requestService.getCurrentUserData().then(function (response) {
          viewModel.currentUser = response;
        });

        $q(function (resolve, reject) {
          launchDarklyService.initialize().then(() => {
            viewModel.isFirstBuildExperienceEnabled = launchDarklyService.variation("enable-first-build-experience");
            viewModel.workspaceSecretsEnabled = launchDarklyService.variation("workspace-secrets");
            viewModel.appSecretsWriteNew = launchDarklyService.variation("wfe-app-secrets-write-new");
            viewModel.enableNewWorkflowsPage = launchDarklyService.variation("enable-new-wfe-workflows-page");

            switch (requestService.mode) {
              case "website":
                requestService.appSlug = appServiceUtil.getAppSlug();

                if (!requestService.appSlug) {
                  return reject("No app slug specified.");
                }

                requestService.getCurrentUserMetadata("last_workflow_edited_date").then((lastWFEDateMetadataResp) => {
                  viewModel.lastWorkflowEditedDate = lastWFEDateMetadataResp;
                }).finally(() => {
                  appService.getAppDetails().then(appService.getOrgBetaTags).then(resolve, reject);
                });

                break;
              case "cli":
                resolve();

                break;
            }
          });
        }).then(
          function () {
            if (requestService.mode == "website") {
              viewModel.defaultBranch = appService.appDetails.defaultBranch;
              viewModel.gitRepoSlug = appService.appDetails.gitRepoSlug;
            }
            if (requestService.mode == "website" && appService.appDetails.isMachineTypeSelectorAvailable) {
              var stackMenu = _.find(viewModel.menus, {
                id: "stack"
              });
              stackMenu.title = "<%= data[:strings][:main][:menus][:stacks_and_machines] %>";
            }

            if (requestService.mode == "website" && appService.appDetails.isCurrentUserIsOrgOwner) {
              var licensesMenu = _.find(viewModel.menus, {
                id: "licenses"
              });
              licensesMenu.cssClass = "licenses";
            }

            appService.getOwnerPlanData().then(function () {
              viewModel.showSharedSecrets = Boolean(appService.ownerPlanData?.sharedResourcesAvailable);

            });

            viewModel.initAppProgress.success();
          },
          function (error) {
            viewModel.initAppProgress.error(error);
          }
        ).then(function () {
          selectInitialMenu();
        });
      };

      viewModel.shouldShowMenuBar = function () {
        if (requestService.mode == "cli") {
          return true;
        }

        return appService.appDetails !== undefined;
      };

      viewModel.isTabEnabledForMenu = function (menu) {
        if (menu && menu.id === "yml") {
          return true;
        }

        if (menu && menu.id === "stack") {
          if (viewModel.loadDataProgress.statusMessage == "<%= data[:strings][:machine_type][:invalid_set_in_bitrise_yml_meta] %>") {
            return true;
          }
        }

        return viewModel.initAppProgress.isIdle && viewModel.loadDataProgress.isIdle;
      };

      viewModel.isMenuEnabled = function (menu) {
        if (viewModel.menuProgress.isInProgress || viewModel.saveProgress.isInProgress) {
          return false;
        }

        return viewModel.isTabEnabledForMenu(menu);
      };

      viewModel.appOwnerNameWithPlaceholder = function () {
        return appService.appDetails?.ownerData?.name || "Unknown owner";
      };

      viewModel.appNameWithPlaceholder = function () {
        return appService.appDetails?.title || "Unknown app";
      };

      viewModel.workflowsAndPipelinesPath = function () {
        return stringService.stringReplacedWithParameters("<%= webserver_path(data[:routes][:website][:workflows_and_pipelines]) %>", {
          app_slug: appService.appDetails?.slug || ""
        });
      };

      window.addEventListener('navigation.replace', (e) => {
        const menu = viewModel.menus.find(m => `/${m.path}` === e.detail.path);

        if (menu) {
          viewModel.menuSelected(menu);
        }
      });
    });
})();
