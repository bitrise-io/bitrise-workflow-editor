(function () {
  "use strict";

  angular
    .module("BitriseWorkflowEditor")
    .controller("CreateAndInsertSecretVariableController", function (
      $scope,
      $q,
      requestService,
      stringService,
      appService,
      Progress,
      Variable
    ) {
      var viewModel = this;

      viewModel.canceler = $q.defer();

      var workflows;
      var selectedWorkflow;
      var selectedStep;
      viewModel.secretSelected;

      $scope.appService = appService;
      $scope.Variable = Variable;
      $scope.requestService = requestService;

      viewModel.newSecretEnvVar = new Variable(
        {
          "": ""
        },
        Variable.defaultVariableConfig()
      );
      viewModel.newSecretEnvVar.customProperties = {
        progress: new Progress()
      };
      viewModel.newSecretEnvVar.isExpand(false);
      viewModel.saveAndInsertSecretEnvVarProgress = new Progress();

      $scope.$on("$destroy", function () {
        viewModel.canceler.resolve();
      });

      viewModel.init = function (
        secretSelectedCallback,
        _workflows,
        _selectedWorkflow,
        _selectedStep
      ) {
        viewModel.secretSelected = secretSelectedCallback;
        workflows = _workflows;
        selectedWorkflow = _selectedWorkflow;
        selectedStep = _selectedStep;
      };

      viewModel.saveAndInsertSecretEnvVar = function () {
        viewModel.saveAndInsertSecretEnvVarProgress.start(
          "<%= data[:strings][:workflows][:inputs][:insert_secret][:save_progress] %>"
        );

        appService.secrets.push(viewModel.newSecretEnvVar);
        appService.saveSecrets().then(
          function () {
            viewModel.secretSelected(viewModel.newSecretEnvVar);

            viewModel.saveAndInsertSecretEnvVarProgress.success();
          },
          function (error) {
            viewModel.saveAndInsertSecretEnvVarProgress.error(error);
          }
        );
      };

      viewModel.envVarValidationWarning = function () {
        var errors = [];
        if (!viewModel.isValidSecretEnvVarKey()) {
          errors.push(
            new Error("<%= data[:strings][:env_vars][:invalid_env_var_key] %>")
          );
          errors.push(
            new Error("<%= data[:strings][:env_vars][:should_be_unique] %>")
          );
        }

        return errors.length > 0
          ? stringService.errorMessageFromErrors(errors)
          : null;
      };

      viewModel.isValidSecretEnvVarKey = function () {
        var keyUniquenessScope = $scope.appService.secrets
          ? $scope.appService.secrets.concat(viewModel.newSecretEnvVar)
          : [viewModel.newSecretEnvVar];
        return Variable.isValidKey(
          viewModel.newSecretEnvVar.key(),
          keyUniquenessScope
        );
      };
    });
})();
