(function () {
  "use strict";

  angular
    .module("BitriseWorkflowEditor")
    .controller("EnvVarsController", function (
      $scope,
      $rootScope,
      $q,
      $cookies,
      requestService,
      stringService,
      appService,
      Progress,
      Variable,
      Popup
    ) {
      var viewModel = this;

      $scope.appService = appService;
      $scope.Variable = Variable;
      $scope.requestService = requestService;

      var mode;
      var envVarsWatchers;

      viewModel.envVarsBySource;

      $scope.$on(
        "$destroy",
        $rootScope.$on("MainController::discardChanges", function () {
          configure();
        })
      );

      $scope.$on(
        "$destroy",
        $rootScope.$on("MainController::saveSuccess", function () {
          configure();
        })
      );

      $scope.$on(
        "$destroy",
        $rootScope.$on("MainController::saveError", function () {
          configure();
        })
      );

      viewModel.configureWithMode = function (_mode) {
        mode = _mode;

        configure();
      };

      function configure() {
        switch (mode) {
          case "secrets":
            configureWithSecrets();

            break;
          case "env-vars":
            configureWithAppConfig();

            break;
        }

        _.each(viewModel.envVarsBySource, function (envVarsOfSource) {
          _.each(envVarsOfSource.envVars, function (anEnvVar) {
            anEnvVar.customProperties.progress = new Progress();
            anEnvVar.customProperties.isMenuVisible = false;
          });
        });

        configureEnvVarsWatchers();
      }

      function configureWithSecrets() {
        viewModel.envVarsBySource = [
          {
            type: "secrets",
            shouldShowInfoBox:
              $cookies.get("should_show_secrets_info_box") == "true",
            toggleInfoBoxVisibility: function () {
              this.shouldShowInfoBox = !this.shouldShowInfoBox;
              $cookies.put(
                "should_show_secrets_info_box",
                this.shouldShowInfoBox ? "true" : "false",
                {
                  expires: new Date(
                    new Date().setFullYear(new Date().getFullYear() + 1)
                  )
                }
              );
            },
            envVars: appService.secrets
          }
        ];
      }

      function configureWithAppConfig() {
        viewModel.envVarsBySource = [];

        viewModel.envVarsBySource.push({
          type: "app",
          notification: "<%= data[:strings][:env_vars][:app][:notification] %>",
          envVars: _.map(
            appService.appConfig.app && appService.appConfig.app.envs
              ? appService.appConfig.app.envs
              : [],
            function (anAppEnvVarConfig) {
              return new Variable(
                anAppEnvVarConfig,
                Variable.defaultVariableConfig()
              );
            }
          )
        });

        _.each(appService.appConfig.workflows, function (
          aWorkflowConfig,
          aWorkflowID
        ) {
          viewModel.envVarsBySource.push({
            type: "workflow",
            workflowID: aWorkflowID,
            notification: stringService.stringReplacedWithParameters(
              "<%= data[:strings][:env_vars][:workflow][:notification] %>",
              {
                workflow_id: aWorkflowID
              }
            ),
            envVars: _.map(aWorkflowConfig.envs, function (anEnvVarConfig) {
              return new Variable(
                anEnvVarConfig,
                Variable.defaultVariableConfig()
              );
            })
          });
        });
      }

      function configureEnvVarsWatchers() {
        if (envVarsWatchers) {
          _.each(envVarsWatchers, function (anEnvVarsWatcher) {
            anEnvVarsWatcher();
          });
        }

        envVarsWatchers = _.map(viewModel.envVarsBySource, function (
          envVarsOfSource
        ) {
          return $scope.$watch(
            function () {
              return envVarsOfSource;
            },
            function (newEnvVarsOfSource) {
              switch (newEnvVarsOfSource.type) {
                case "app":
                  if (!appService.appConfig) {
                    return;
                  }

                  if (!appService.appConfig.app) {
                    appService.appConfig.app = {};
                  }

                  appService.appConfig.app.envs = _.map(
                    newEnvVarsOfSource.envVars,
                    function (anEnvVar) {
                      return anEnvVar.userVariableConfig;
                    }
                  );

                  if (_.isEmpty(appService.appConfig.app.envs)) {
                    delete appService.appConfig.app["envs"];
                  }

                  if (_.isEmpty(appService.appConfig.app)) {
                    delete appService.appConfig["app"];
                  }

                  break;
                case "workflow": {
                  if (!appService.appConfig) {
                    return;
                  }

                  appService.appConfig.workflows[
                    newEnvVarsOfSource.workflowID
                    ].envs = _.map(newEnvVarsOfSource.envVars, function (
                    anEnvVar
                  ) {
                    return anEnvVar.userVariableConfig;
                  });

                  if (
                    _.isEmpty(
                      appService.appConfig.workflows[
                        newEnvVarsOfSource.workflowID
                        ].envs
                    )
                  ) {
                    delete appService.appConfig.workflows[
                      newEnvVarsOfSource.workflowID
                      ]["envs"];
                  }

                  break;
                }
              }
            },
            true
          );
        });
      }

      viewModel.addToEnvVars = function (envVars) {
        var newEnvVar = new Variable(
          {
            "": ""
          },
          Variable.defaultVariableConfig()
        );
        newEnvVar.isExpand(false);

        newEnvVar.customProperties.progress = new Progress();
        newEnvVar.customProperties.isMenuVisible = false;

        envVars.push(newEnvVar);
      };

      viewModel.removeEnvVarFromEnvVars = function (envVar, envVars) {
        var index = _.indexOf(envVars, envVar);

        envVars.splice(index, 1);
      };

      viewModel.envVarValidationWarning = function (envVar, keyUniquenessScope) {
        var errors = [];

        if (!Variable.isValidKey(envVar.key(), keyUniquenessScope)) {
          errors.push(
            new Error("<%= data[:strings][:env_vars][:invalid_env_var_key] %>")
          );

          if (keyUniquenessScope) {
            errors.push(
              new Error("<%= data[:strings][:env_vars][:should_be_unique] %>")
            );
          }
        }

        return errors.length > 0
          ? stringService.errorMessageFromErrors(errors)
          : null;
      };

      viewModel.valueVisibilityGetterSetterForEnvVar = function (secret) {
        return function (shouldShowValue) {
          if (shouldShowValue !== undefined) {
            if (
              shouldShowValue &&
              !secret.customProperties.progress.isInProgress
            ) {
              getSecretValue(secret);
            }

            secret.shouldShowValue = shouldShowValue;
          }

          return secret.shouldShowValue;
        };
      };

      function getSecretValue(secret) {
        secret.customProperties.progress.start(
          "<%= data[:strings][:env_vars][:get_secret_env_value_progress][:in_progress] %>"
        );

        appService.getSecretValue(secret).then(
          function () {
            secret.customProperties.progress.success();
          },
          function (error) {
            secret.customProperties.progress.error(error);
          }
        );
      }

      viewModel.valueGetterSetterForEnvVar = function (envVar) {
        return function (value) {
          return envVar.value() !== null && envVar.shouldShowValue
            ? envVar.value(value)
            : "******";
        };
      };

      viewModel.makeEnvVarProtected = function (envVar) {
        Popup.showConfirmPopup(
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_question] %>",
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_details] %>",
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_ok] %>",
          "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_cancel] %>"
        ).then(function () {
          envVar.shouldShowValue = false;
          envVar.isKeyChangeable = false;
          envVar.isProtected(true);
        });
      };
    });
})();
