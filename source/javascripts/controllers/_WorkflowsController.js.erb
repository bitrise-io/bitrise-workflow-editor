import {safeDigest} from "@/services/react-compat";
import datadogRumCustomTiming from "../utils/datadogCustomRumTiming.ts";
import VersionUtils from "@/core/utils/VersionUtils";
import {
  extractInputNames,
  extractReleaseNotesUrl
} from "@/pages/WorkflowsPage/components/StepConfigPanel/StepConfigPanel.utils";
import semverDiff from 'semver/functions/diff'
import EnvVarService from "@/core/models/EnvVarService";

(function () {
  "use strict";

  angular
    .module("BitriseWorkflowEditor")
    .controller("WorkflowsController", function ($scope, $rootScope, $q, $location, appServiceUtil, stringService, requestService, scrollService, appService, stepSourceService, workflowSelectionStore, workflowSelectionService, launchDarklyService, Progress, Popup, Workflow, Step, Variable, $window, $timeout, Stack, MachineType,) {
      var viewModel = this;

      viewModel.loadWorkflowsProgress = new Progress();
      viewModel.workflowsHeight = 0;
      viewModel.shouldShowWorkflowsContent = false;
      viewModel.getAvailableHeightForWorkflows = function () {
        viewModel.shouldShowWorkflowsContent = false;

        $timeout(function () {
          var element = angular.element(document.querySelector("div.workflows"));
          viewModel.workflowsHeight = element[0].offsetHeight - 1; // this 1px is required to avoid a bug with the sticky header

          viewModel.shouldShowWorkflowsContent = true;
        }, 100);
      };

      var resizeTimeout;
      var RESIZE_DELAY = 500;
      angular.element($window).on("resize", function () {
        if (resizeTimeout) {
          $timeout.cancel(resizeTimeout);
        }

        resizeTimeout = $timeout(viewModel.getAvailableHeightForWorkflows, RESIZE_DELAY);
      });

      viewModel.canceler = $q.defer();

      $scope.requestService = requestService;

      $scope.$on("$destroy", function () {
        viewModel.canceler.resolve();

        if (resizeTimeout) {
          $timeout.cancel(resizeTimeout);
        }
      });

      $scope.$on("$destroy", $rootScope.$on("MainController::changesDiscarded", function () {
        updateUniqueCount();
        workflowSelectionStore.disable();
        viewModel.yml = appService.appConfig;

        var lastSelectedWorkflowNotFound = !_.find(viewModel.workflows, {
          id: workflowSelectionStore.lastSelectedWorkflowID
        });

        loadWorkflows()
          .then(function () {
            if (lastSelectedWorkflowNotFound) {
              workflowSelectionStore.reset();
            }

            workflowSelectionService.restoreSelection(viewModel);
          })
          .then(function () {
            workflowSelectionStore.enable();
          });
      }));

      viewModel.buildTriggerToken = undefined;
      viewModel.defaultBranch = undefined;
      viewModel.canRunWorkflow = false;

      viewModel.init = function () {
        workflowSelectionStore.disable();

        viewModel.yml = appService.appConfig;

        loadWorkflows().then(function () {
          workflowSelectionService.restoreSelection(viewModel);
          workflowSelectionStore.enable();
        }).then(() => {
          var queryParams = new URLSearchParams(window.location.search);
          if (queryParams.has("add-workflow")) {
            viewModel.openReactCreateWorkflowDialog();
          }
        });

        if (requestService.isWebsiteMode()) {
          loadAppAndUser();
        }
      };

      function loadAppAndUser() {
        $q.all([requestService.getApp(appServiceUtil.getAppSlug()), appService.getOwnerPlanData(),]).then(function ([app, _planData]) {
          viewModel.defaultBranch = app?.default_branch;
          viewModel.buildTriggerToken = app?.build_trigger_token;
          viewModel.uniqueStepLimit = appService.ownerPlanData?.uniqueStepLimit;
          updateCanRunWorkflow(app?.build_trigger_token, viewModel.selectedWorkflow);
        });
      }

      function updateCanRunWorkflow(buildTriggerToken, workflow) {
        viewModel.canRunWorkflow = requestService.isWebsiteMode() && Boolean(buildTriggerToken) && !isUtilityWorkflow(workflow);
      }

      function isUtilityWorkflow(workflow) {
        return workflow && workflow.id && workflow.id.startsWith("_");
      }

      function loadWorkflows() {
        viewModel.loadWorkflowsProgress.start("<%= data[:strings][:workflows][:load_workflows_progress][:in_progress] %>");

        var canceler = $q.defer();
        $scope.$on("$destroy", function () {
          canceler.resolve();
        });

        stepSourceService.defaultLibraryURL = appService.appConfig.default_step_lib_source;

        return $q(function (resolve, reject) {
          var CVSs = [];
          _.each(appService.appConfig.workflows, function (aWorkflowConfig) {
            _.each(aWorkflowConfig.steps, function (aWrappedUserStepConfig) {
              CVSs.push(Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig));
            });
          });

          stepSourceService
            .loadStepsWithCVSs(CVSs, {
              timeout: canceler.promise
            })
            .then(function () {
              datadogRumCustomTiming("wfe", "workflows");
              viewModel.workflows = _.map(appService.appConfig.workflows, function (aWorkflowConfig, aWorkflowID) {
                return new Workflow(aWorkflowID, aWorkflowConfig);
              }).sort((a, b) => a.id.localeCompare(b.id));
              updateUniqueCount();
              resolve();
            }, function (error) {
              reject(error);
            });
        }).then(function () {
          viewModel.loadWorkflowsProgress.success();
        }, function (error) {
          viewModel.workflows = undefined;
          viewModel.loadWorkflowsProgress.error(new Error(stringService.stringReplacedWithParameters("<%= data[:strings][:workflows][:load_workflows_progress][:error] %>", {
            error: error.message
          })));
        });
      }

      // Workflow chains

      viewModel.workflows;
      viewModel.selectedWorkflow = null;
      viewModel.selectedWorkflowChain = null;

      $scope.$watchCollection(function () {
        return viewModel.workflows;
      }, function (workflows) {
        if (workflows === undefined) {
          return;
        }

        var wf = workflowSelectionService.findSelectedWorkflow(viewModel);
        workflowSelectionService.rearrangeSelection(viewModel, wf, workflowSelectionStore.lastEditedWorkflowID);

        if (workflows.length === 0) {
          delete appService.appConfig["workflows"];
          return;
        }

        appService.appConfig.workflows = {};
        _.each(workflows, function (aWorkflow) {
          appService.appConfig.workflows[aWorkflow.id] = aWorkflow.workflowConfig;
        });
      });

      $scope.$watch(function () {
        return viewModel.selectedWorkflow;
      }, function (selectedWorkflow) {
        viewModel.renamedWorkflow = null;
        updateCanRunWorkflow(viewModel.buildTriggerToken, selectedWorkflow);

        if (!selectedWorkflow) {
          return;
        }

        if ($location.search().workflow_id !== selectedWorkflow.id) {
          $location.search("workflow_id", selectedWorkflow.id).replace();
        }
      });

      // Workflow add

      viewModel.showReactCreateWorkflowDialog = false;

      viewModel.openReactCreateWorkflowDialog = () => {
        viewModel.showReactCreateWorkflowDialog = true;
        safeDigest($scope);
      };

      viewModel.closeReactCreateWorkflowDialog = () => {
        viewModel.showReactCreateWorkflowDialog = false;
        safeDigest($scope);
      }

      viewModel.createReactWorkflow = (workflowId, baseWorkflowId) => {
        const baseWorkflow = viewModel.workflows?.find(({id}) => id === baseWorkflowId);
        const createdWorkflow = new Workflow(workflowId, baseWorkflow ? angular.copy(baseWorkflow.workflowConfig) : {});

        viewModel.workflows = [...viewModel.workflows, createdWorkflow];
        workflowSelectionService.rearrangeSelection(viewModel, createdWorkflow);
        safeDigest($scope);
      }

      // Workflow delete

      viewModel.showReactDeleteWorkflowDialog = false;

      viewModel.openReactDeleteWorkflowDialog = function () {
        viewModel.showReactDeleteWorkflowDialog = true;
        safeDigest($scope);
      }

      viewModel.closeReactDeleteWorkflowDialog = function () {
        viewModel.showReactDeleteWorkflowDialog = false;
        safeDigest($scope);
      }

      viewModel.deleteReactWorkflow = function (wfId) {
        viewModel.workflows = viewModel.workflows.filter(function (workflow) {
          return workflow.id !== wfId;
        });

        _.each(viewModel.workflows, function (aWorkflow) {
          if (aWorkflow.workflowConfig.before_run) {
            while (_.contains(aWorkflow.workflowConfig.before_run, wfId)) {
              aWorkflow.workflowConfig.before_run.splice(_.indexOf(aWorkflow.workflowConfig.before_run, wfId), 1);
            }
          }
          if (aWorkflow.workflowConfig.after_run) {
            while (_.contains(aWorkflow.workflowConfig.after_run, wfId)) {
              aWorkflow.workflowConfig.after_run.splice(_.indexOf(aWorkflow.workflowConfig.after_run, wfId), 1);
            }
          }
        });

        while (_.find(appService.appConfig.trigger_map, {
          workflow: wfId
        })) {
          appService.appConfig.trigger_map.splice(_.findIndex(appService.appConfig.trigger_map, {
            workflow: wfId
          }), 1);
        }

        workflowSelectionService.rearrangeSelection(viewModel);
      };

      viewModel.runWorkflow = function (branch) {
        requestService.startBuild({
          branch: branch,
          workflow: viewModel.selectedWorkflow.id,
          triggerToken: viewModel.buildTriggerToken,
          triggeredBy: window.parent?.globalProps?.user?.username
        }).then(function (data) {
          if (data.status === "ok" && data.build_url) {
            window.open(data.build_url, "_blank");
          }
        }, function (error) {
          console.log(error);
        });
      };

      viewModel.runWorkflowWithDigest = function (branch) {
        viewModel.runWorkflow(branch);
        safeDigest($scope);
      };

      function workflowChainHierarchy(workflow) {
        var _workflowChainHierarchy = [];

        _.each(workflow.beforeRunWorkflows(viewModel.workflows), function (aBeforeRunWorkflow) {
          _workflowChainHierarchy.push({
            type: "before-run",
            cssClass: "before-run",
            workflow: aBeforeRunWorkflow,
            workflowChain: aBeforeRunWorkflow.workflowChain(viewModel.workflows)
          });
        });

        _workflowChainHierarchy.push({
          type: "selected",
          cssClass: "selected",
          workflow: viewModel.selectedWorkflow,
          workflowChain: [viewModel.selectedWorkflow]
        });

        _.each(workflow.afterRunWorkflows(viewModel.workflows), function (anAfterRunWorkflow) {
          _workflowChainHierarchy.push({
            type: "after-run",
            cssClass: "after-run",
            workflow: anAfterRunWorkflow,
            workflowChain: anAfterRunWorkflow.workflowChain(viewModel.workflows)
          });
        });

        return _workflowChainHierarchy;
      }

      viewModel.openReactChainWorkflowDrawer = function () {
        viewModel.showReactChainWorkflowDrawer = true;
        safeDigest($scope);
      }

      viewModel.closeReactChainWorkflowDrawer = function () {
        viewModel.showReactChainWorkflowDrawer = false;
        safeDigest($scope);
      }

      viewModel.chainWorkflow = function (mode, addedWorkflowId) {
        var runKey = mode === "before" ? "before_run" : "after_run";
        if (!viewModel.selectedWorkflow.workflowConfig[runKey]) {
          viewModel.selectedWorkflow.workflowConfig[runKey] = [];
        }

        viewModel.selectedWorkflow.workflowConfig[runKey].push(addedWorkflowId);

        // select the current one and edit newly generated one
        workflowSelectionService.rearrangeSelection(viewModel, viewModel.selectedWorkflow, addedWorkflowId);
        viewModel.closeReactChainWorkflowDrawer();
      };

      viewModel.deleteBeforeAfterWorkflowAtWorkflowChainLink = function (workflowChainLink) {
        if (workflowChainLink.selectedWorkflowBeforeRunWorkflowIndex != -1) {
          viewModel.selectedWorkflow.workflowConfig.before_run.splice(workflowChainLink.selectedWorkflowBeforeRunWorkflowIndex, 1);
        } else if (workflowChainLink.selectedWorkflowAfterRunWorkflowIndex != -1) {
          viewModel.selectedWorkflow.workflowConfig.after_run.splice(workflowChainLink.selectedWorkflowAfterRunWorkflowIndex, 1);
        }

        // select the current one and regenerate workflowchain
        workflowSelectionService.rearrangeSelection(viewModel, viewModel.selectedWorkflow);
      };

      viewModel.rearrangeWorkflowsPopup = new Popup();
      viewModel.rearrangeWorkflowsChainHierarchy;

      viewModel.openRearrangeWorkflowsPopup = function () {
        viewModel.rearrangeWorkflowsPopup.isVisible = true;
      };

      viewModel.openRearrangeWorkflowsPopupWithDigest = function () {
        $timeout(function () {
          viewModel.openRearrangeWorkflowsPopup();
        }, 0);
      };

      viewModel.rearrangeWorkflowsPopup.beforeAppearCallback = function () {
        viewModel.rearrangeWorkflowsChainHierarchy = workflowChainHierarchy(viewModel.selectedWorkflow);
      };

      viewModel.rearrangeWorkflowsFinished = function () {
        var selectedWorkflowSubchainIndex = _.findIndex(viewModel.rearrangeWorkflowsChainHierarchy, {
          type: "selected"
        });

        viewModel.selectedWorkflow.workflowConfig.before_run = selectedWorkflowSubchainIndex > 0 ? _.map(viewModel.rearrangeWorkflowsChainHierarchy.slice(0, selectedWorkflowSubchainIndex), function (aWorkflowSubchain) {
          return aWorkflowSubchain.workflow.id;
        }) : [];
        if (viewModel.selectedWorkflow.workflowConfig.before_run.length == 0) {
          delete viewModel.selectedWorkflow.workflowConfig["before_run"];
        }

        viewModel.selectedWorkflow.workflowConfig.after_run = selectedWorkflowSubchainIndex < viewModel.rearrangeWorkflowsChainHierarchy.length - 1 ? _.map(viewModel.rearrangeWorkflowsChainHierarchy.slice(selectedWorkflowSubchainIndex + 1), function (aWorkflowSubchain) {
          return aWorkflowSubchain.workflow.id;
        }) : [];
        if (viewModel.selectedWorkflow.workflowConfig.after_run.length == 0) {
          delete viewModel.selectedWorkflow.workflowConfig["after_run"];
        }

        viewModel.rearrangeWorkflowsPopup.isVisible = false;

        workflowSelectionService.rearrangeSelection(viewModel, viewModel.selectedWorkflow, viewModel.editedWorkflow.id);
      };

      // Workflow rename

      viewModel.confirmRenameWorkflowWithDigest = function (workflow, newWorkflowID) {
        $timeout(function () {
          viewModel.renameWorkflowConfirmed(workflow, newWorkflowID);
        }, 0);
      };

      viewModel.renameWorkflowConfirmed = function (workflow, newWorkflowID, shouldSelect = true) {
        var oldWorkflowID = workflow.id;

        delete appService.appConfig.workflows[oldWorkflowID];
        appService.appConfig.workflows[newWorkflowID] = workflow.workflowConfig;

        _.each(viewModel.workflows, function (aWorkflow) {
          if (aWorkflow.workflowConfig.before_run) {
            _.each(aWorkflow.workflowConfig.before_run, function (aBeforeRunWorkflowID, index) {
              if (aBeforeRunWorkflowID == oldWorkflowID) {
                aWorkflow.workflowConfig.before_run[index] = newWorkflowID;
              }
            });
          }
          if (aWorkflow.workflowConfig.after_run) {
            _.each(aWorkflow.workflowConfig.after_run, function (anAfterRunWorkflowID, index) {
              if (anAfterRunWorkflowID == oldWorkflowID) {
                aWorkflow.workflowConfig.after_run[index] = newWorkflowID;
              }
            });
          }
        });

        _.each(appService.appConfig.trigger_map, function (aTriggerConfig) {
          if (aTriggerConfig.workflow == oldWorkflowID) {
            aTriggerConfig.workflow = newWorkflowID;
          }
        });

        _.each(appService.appConfig.stages, function (aStage) {
          _.each(aStage.workflows, function (aWorkflow) {
            if (aWorkflow[oldWorkflowID]) {
              aWorkflow[newWorkflowID] = aWorkflow[oldWorkflowID];
              delete aWorkflow[oldWorkflowID];
            }
          });
        });

        workflow.id = newWorkflowID;

        if (shouldSelect) {
          viewModel.selectWorkflow(workflow);
        }

        workflowSelectionStore.applyState({
          lastSelectedWorkflow: viewModel.selectedWorkflow,
          lastEditedWorkflow: viewModel.editedWorkflow,
          lastEditedWorkflowIndex: viewModel.editedWorkflowIndex,
          lastSelectedStep: viewModel.selectedStep
        });
      };

      // Edited worklow

      viewModel.editedWorkflow;
      viewModel.editedWorkflowIndex;


      viewModel.selectWorkflowWithDigest = function (workflow) {
        $timeout(function () {
          viewModel.selectWorkflow(workflow);
        }, 0);
      };

      viewModel.selectWorkflow = function (workflow) {
        workflowSelectionService.rearrangeSelection(viewModel, workflow);
      };

      viewModel.editWorkflowAtIndex = function (workflowIndex, shouldTransformEditedWorkflowToReact = true) {
        viewModel.editedWorkflowIndex = workflowIndex === null ? null : workflowIndex;
        viewModel.editedWorkflow = workflowIndex === null ? null : viewModel.selectedWorkflowChain[workflowIndex].workflow;

        workflowSelectionStore.applyState({
          lastSelectedWorkflow: viewModel.selectedWorkflow,
          lastEditedWorkflow: viewModel.editedWorkflow,
          lastEditedWorkflowIndex: viewModel.editedWorkflowIndex,
          lastSelectedStep: viewModel.selectedStep
        });

        if (shouldTransformEditedWorkflowToReact) {
          transformEditedWorkflowForReact();
        }
      };

      viewModel.stackForWorkflow = function (workflow, shouldNormalize) {
        if (shouldNormalize === undefined) {
          shouldNormalize = false;
        }

        var stack = workflow.stack(stack);
        if (stack === null && shouldNormalize) {
          stack = appService.stack;
        }

        return stack;
      };

      // Steps

      $scope.stepSourceService = stepSourceService;

      viewModel.selectedStep = null;
      viewModel.selectedStepResolvedVersion = null;
      viewModel.selectedStepLatestVersion = null;
      viewModel.selectedStepVersionsWithRemarks = null;
      viewModel.selectedStepVersionChangeDialogProps = null;
      viewModel.shouldShowDescription = false;
      viewModel.stepOrderWorkflow;

      $scope.$watch(function () {
        return viewModel.editedWorkflow;
      }, function (editedWorkflow) {
        if (editedWorkflow && !_.contains(editedWorkflow.steps, viewModel.selectedStep)) {
          viewModel.selectedStep = null;
        }
      });

      $scope.$watchCollection(function () {
        return viewModel.editedWorkflow ? viewModel.editedWorkflow.steps : undefined;
      }, function (steps) {
        updateWorkflowWithSteps(viewModel.editedWorkflow, steps);
      });

      $scope.$watchCollection(function () {
        return viewModel.stepOrderWorkflow ? viewModel.stepOrderWorkflow.steps : undefined;
      }, function (steps) {
        updateWorkflowWithSteps(viewModel.stepOrderWorkflow, steps);
      });

      function updateWorkflowWithSteps(workflow, steps) {
        if (!steps) {
          return;
        }

        workflow.workflowConfig.steps = [];

        _.each(steps, function (aStep) {
          var wrappedUserStepConfig = {};
          wrappedUserStepConfig[aStep.cvs] = aStep.userStepConfig;

          if (aStep.isWithBlock()) {
            aStep.withBlockData = {
              image: appService.getWithBlockImage(aStep.userStepConfig?.container),
              services: appService.getWithBlockServices(aStep.userStepConfig?.services)
            };
          }

          workflow.workflowConfig.steps.push(wrappedUserStepConfig);
        });

        if (workflow.workflowConfig.steps.length == 0) {
          delete workflow.workflowConfig["steps"];
        }
      }

      function updateUniqueCount() {
        if (!requestService.isWebsiteMode() || typeof (appService?.ownerPlanData?.uniqueStepLimit) !== "number") {
          return;
        }

        var allowedStepIds = new Set();
        viewModel.workflows.forEach(function (wf) {
          wf.steps.forEach(function (step) {
            if (step.id) {
              allowedStepIds.add(step.id);
            }
          });
        });

        viewModel.uniqueStepCount = allowedStepIds.size;
        var uniqueStepLimit = appService.ownerPlanData?.uniqueStepLimit;
        var hasReachedLimit = viewModel.uniqueStepCount >= uniqueStepLimit;
        appService.allowedStepIds = hasReachedLimit ? allowedStepIds : undefined;
      }

      viewModel.addStepSelectedAtIndex = function (index, workflowIndex) {
        viewModel.editWorkflowAtIndex(workflowIndex);
        viewModel.openReactStepDrawer(index);
      };

      function insertStepAtIndexCallback(step, insertIndex) {
        viewModel.editedWorkflow.steps.splice(insertIndex, 0, step);
        updateUniqueCount();

        // force to set latest version for step being added
        changeStepToVersion(step, null);

        viewModel.stepSelected(step);
      }

      viewModel.showReactStepDrawer = false;

      viewModel.openReactStepDrawer = function (index) {
        viewModel.newStepDrawerAddStepIndex = index;
        viewModel.showReactStepDrawer = true;
        safeDigest($scope);
      }

      viewModel.closeReactStepDrawer = function () {
        viewModel.showReactStepDrawer = false;
        viewModel.newStepDrawerAddStepIndex = undefined;
        safeDigest($scope);
      }

      viewModel.handleInsertStepAtIndexFromReact = function (step) {
        if (viewModel.newStepDrawerAddStepIndex === undefined || !step.cvs) {
          return;
        }

        const insertIndex = viewModel.newStepDrawerAddStepIndex;
        stepSourceService.loadStepVersions(step.resolvedInfo.id).then(function () {
          var stepToAdd = stepSourceService.stepFromCVS(step.cvs);
          insertStepAtIndexCallback(stepToAdd, insertIndex);
        });

        viewModel.closeReactStepDrawer();
        safeDigest($scope);
      }

      function resetEditContainerScrollPosition() {
        var el = $(".step-edit-container");
        if (el.length) {
          el[0].scrollTop = 0;
        }
      }

      function setSelectedStepDependentData(step, dialogProps) {
        if (!step) {
          viewModel.selectedStep = null;
          viewModel.selectedStepResolvedVersion = null;
          viewModel.selectedStepLatestVersion = null;
          viewModel.selectedStepVersionsWithRemarks = [];
          viewModel.selectedStepVersionChangeDialogProps = null;
          return;
        }

        viewModel.selectedStep = step;
        viewModel.selectedStepResolvedVersion = stepSourceService.resolveRequestedStepVersion(step.requestedVersion(), step);
        viewModel.selectedStepLatestVersion = stepSourceService.latestVersion(step);
        viewModel.selectedStepVersionsWithRemarks = stepSourceService.versionsOfStep(step)?.map((version) => ({
          version, remark: VersionUtils.getVersionRemark(version)
        })) || [];
        viewModel.selectedStepVersionChangeDialogProps = dialogProps;
      }


      viewModel.stepSelected = function (step, workflowIndex, shouldScrollToStep) {
        $q(function (resolve) {
          if (step.libraryURL === appService.appConfig.default_step_lib_source) {
            stepSourceService.loadStepVersions(step.id).then(function () {
              setSelectedStepDependentData(step);
              resolve();
            });
          } else {
            setSelectedStepDependentData(step);
            resolve();
          }
        }).then(function () {
          workflowIndex ??= viewModel.editedWorkflowIndex;
          shouldScrollToStep ??= viewModel.editedWorkflowIndex != workflowIndex;

          if (viewModel.editedWorkflowIndex != workflowIndex) {
            viewModel.editWorkflowAtIndex(workflowIndex);
          }

          if (shouldScrollToStep) {
            setTimeout(function () {
              scrollService.scrollToTarget();
            }, 300);
          }

          resetEditContainerScrollPosition();
          safeDigest($scope);
        });
      };

      viewModel.deselectStep = function () {
        setSelectedStepDependentData(null);
        safeDigest($scope);
      };

      $scope.$watch(function () {
        return viewModel.selectedStep;
      }, function (step) {
        viewModel.shouldShowDescription = false;
        workflowSelectionStore.applyState({
          lastSelectedWorkflow: viewModel.selectedWorkflow,
          lastEditedWorkflow: viewModel.editedWorkflow,
          lastEditedWorkflowIndex: viewModel.editedWorkflowIndex,
          lastSelectedStep: step
        });
        configureInputsForStep(step);
        configureOutputsForStep(step);
        safeDigest($scope);
      });
      $scope.$watch(function () {
        return viewModel.selectedStep;
      }, function (selectedStep) {
        configureInputsForStep(selectedStep);
        configureOutputsForStep(selectedStep);
      });

      $scope.$watch(function () {
        return viewModel.selectedStep ? viewModel.selectedStep.requestedVersion() : undefined;
      }, function () {
        configureInputsForStep(viewModel.selectedStep);
        configureOutputsForStep(viewModel.selectedStep);
      });

      viewModel.cloneSelectedStep = function () {
        var clonedStep = stepSourceService.stepFromCVS(viewModel.selectedStep.cvs);
        clonedStep.userStepConfig = angular.copy(viewModel.selectedStep.userStepConfig);

        var index = _.indexOf(viewModel.editedWorkflow.steps, viewModel.selectedStep);
        viewModel.editedWorkflow.steps.splice(index + 1, 0, clonedStep);
        updateUniqueCount();

        viewModel.stepSelected(clonedStep);

        safeDigest($scope);
      };

      viewModel.deleteSelectedStep = function () {
        var index = _.indexOf(viewModel.editedWorkflow.steps, viewModel.selectedStep);
        viewModel.editedWorkflow.steps.splice(index, 1);
        updateUniqueCount();
        viewModel.deselectStep();
        safeDigest($scope);
      };

      // Step version

      function changeStepToVersion(step, version) {
        if (!step || step.isLocal() || version === step.requestedVersion()) {
          return;
        }

        const oldInputNames = extractInputNames(step);
        const oldVersion = step.version;

        stepSourceService.changeStepToVersion(step, version);

        // Writes the user step config to the workflow config
        if (viewModel.editedWorkflow.workflowConfig.steps) {
          var oldWrappedUserStepConfig = _.find(viewModel.editedWorkflow.workflowConfig.steps, function (aWrappedUserStepConfig) {
            return (aWrappedUserStepConfig[Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig)] == step.userStepConfig);
          });

          var newWrappedUserStepConfig = {};
          newWrappedUserStepConfig[step.cvs] = step.userStepConfig;
          viewModel.editedWorkflow.workflowConfig.steps.splice(_.indexOf(viewModel.editedWorkflow.workflowConfig.steps, oldWrappedUserStepConfig), 1, newWrappedUserStepConfig);
        }

        // Calculate version changes
        const newVersion = step.version;

        // Check if major version has changed
        const change = semverDiff(oldVersion.replace(/x/g, '0'), newVersion.replace(/x/g, '0'));
        const isVersionChanged = Boolean(change);
        const isMajorChange = change === "major";

        // Calculate input changes between different step versions
        const newInputNames = extractInputNames(step);
        const removedInputs = oldInputNames.filter((name) => !newInputNames.includes(name));
        const newInputs = newInputNames.filter((name) => !oldInputNames.includes(name));
        const hasInputChanged = removedInputs.length > 0 || newInputs.length > 0;

        // Open change dialog if version or input has changed
        const shouldOpenChangeDialog = isVersionChanged && (isMajorChange || hasInputChanged);
        const dialogProps = shouldOpenChangeDialog ? {
          isMajorChange, removedInputs, newInputs, releaseNotesUrl: extractReleaseNotesUrl(step)
        } : null;

        setSelectedStepDependentData(step, dialogProps);
        safeDigest($scope);
      }

      // Step rename

      function renameStep(step, title) {
        if (!step) {
          return;
        }

        if (Step.isValidTitle(title)) {
          step.title(title);
          safeDigest($scope);
        }
      };

      $scope.Step = Step;

      // Inputs

      var inputWatchers;
      viewModel.inputCategoriesOfSelectedStep;

      function configureInputsForStep(step) {
        viewModel.inputCategoriesOfSelectedStep = [];

        if (step && step.defaultStepConfig) {
          _.each(step.defaultStepConfig.inputs, function (anDefaultInputConfig) {
            var userInputConfig = _.find(step.userStepConfig.inputs, function (aUserInputConfig) {
              return (Variable.keyFromVariableConfig(aUserInputConfig) == Variable.keyFromVariableConfig(anDefaultInputConfig));
            });

            var input = new Variable(userInputConfig, anDefaultInputConfig);
            var inputCategory = _.find(viewModel.inputCategoriesOfSelectedStep, {
              name: input.category()
            });

            if (!inputCategory) {
              inputCategory = {
                name: input.category(), inputs: []
              };
              viewModel.inputCategoriesOfSelectedStep.push(inputCategory);
            }

            inputCategory.inputs.push(input);
          });
        }

        _.each(inputWatchers, function (anInputWatcher) {
          anInputWatcher();
        });

        inputWatchers = [];

        _.each(viewModel.inputCategoriesOfSelectedStep, function (anInputCategory) {
          _.each(anInputCategory.inputs, function (anInput) {
            inputWatchers.push($scope.$watch(function () {
              var userVariableConfigWithOnlyDefaultKeyAndDefaultValue = {};
              var defaultKey = Variable.keyFromVariableConfig(anInput.defaultVariableConfig);
              userVariableConfigWithOnlyDefaultKeyAndDefaultValue[defaultKey] = anInput.defaultVariableConfig[defaultKey];

              return (angular.equals(anInput.userVariableConfig, {}) || angular.equals(anInput.userVariableConfig, userVariableConfigWithOnlyDefaultKeyAndDefaultValue));
            }, function (isUserInputConfigDefaultNow, wasUserInputConfigDefaultBefore) {
              if (isUserInputConfigDefaultNow === true && wasUserInputConfigDefaultBefore === false) {
                var indexOfUserInputConfig = _.findIndex(step.userStepConfig.inputs, function (aUserInputConfig) {
                  return Variable.keyFromVariableConfig(aUserInputConfig) == anInput.key();
                });

                step.userStepConfig.inputs.splice(indexOfUserInputConfig, 1);

                if (angular.equals(step.userStepConfig.inputs, [])) {
                  delete step.userStepConfig["inputs"];
                }
              }

              if (isUserInputConfigDefaultNow === false && wasUserInputConfigDefaultBefore === true) {
                if (!step.userStepConfig.inputs) {
                  step.userStepConfig.inputs = [];
                }

                var indexOfUserInputConfig = _.findIndex(step.userStepConfig.inputs, function (aUserInputConfig) {
                  return Variable.keyFromVariableConfig(aUserInputConfig) == anInput.key();
                });

                step.userStepConfig.inputs.splice(indexOfUserInputConfig, indexOfUserInputConfig == -1 ? 0 : 1, anInput.userVariableConfig);
              }
            }));
          });
        });

        safeDigest($scope);
      }

      // Outputs

      viewModel.outputVariables;

      function configureOutputsForStep(step) {
        viewModel.outputsOfSelectedStep = step && step.defaultStepConfig ? _.map(step.defaultStepConfig.outputs, function (anDefaultOutputConfig) {
          return new Variable(undefined, anDefaultOutputConfig);
        }) : undefined;
        viewModel.outputVariables = viewModel.outputsOfSelectedStep ? viewModel.outputsOfSelectedStep.map(function (variable) {
          const varKey = variable.key();
          const key = varKey ? `$${varKey}` : undefined;
          return ({
            key, title: variable.title(), summary: variable.summary(), description: variable.description()
          });
        }) : [];
        safeDigest($scope);
      }

      viewModel.checkStepVersionUpdate = function (step) {
        if (!step || step.isLocal() || !step.defaultStepConfig) {
          return false;
        }

        const isStepConfigured = step.isConfigured();
        const isLatestStepVersion = stepSourceService.isLatestStepVersion(step);

        return !isStepConfigured || !isLatestStepVersion;
      };

      viewModel.handleSelectedStepChanges = function (values) {
        if (!viewModel.selectedStep || !values) {
          return;
        }

        Object.entries(values).forEach(([key, value]) => {
          if (key === "properties") {
            handleStepPropertiesChanged(value);
            return;
          }

          if (key === "run_if") {
            viewModel.selectedStep.runIf(String(value));
            return;
          }

          if (key === "is_always_run") {
            viewModel.selectedStep.isAlwaysRun(Boolean(value));
            return;
          }

          viewModel.inputCategoriesOfSelectedStep.forEach((category) => {
            category.inputs.forEach((variable) => {
              if (variable.key() === key) {
                variable.value(value);
              }
            });
          });
        });

        safeDigest($scope);
      };

      function handleStepPropertiesChanged(properties) {
        Object.entries(properties).forEach(([key, value]) => {
          if (key === "name") {
            renameStep(viewModel.selectedStep, String(value));
            return;
          }

          if (key === "version") {
            changeStepToVersion(viewModel.selectedStep, String(value));
            return;
          }
        });
      };

      viewModel.saveEnvVarFromReact = function (envVar) {
        const variable = new Variable({[envVar.key]: envVar.value}, Variable.defaultVariableConfig());

        variable.isExpand(envVar.isExpand);

        const appConfig = appService.appConfig;

        if (appConfig && appConfig.workflows && appConfig.workflows[viewModel.selectedWorkflow.id]) {
          const wf = appConfig.workflows[viewModel.selectedWorkflow.id];
          if (!wf.envs) {
            wf.envs = [];
          }

          wf.envs.push(variable.userVariableConfig);
        }
      };

      viewModel.saveSecretFromReact = function (secret) {
        const variable = new Variable({[secret.key]: secret.value}, Variable.defaultVariableConfig());

        variable.isExpose(secret.isExpose);
        variable.isExpand(secret.isExpand);

        appService.secrets.push(variable);
        appService.saveSecrets($scope.mainCtrl.appSecretsWriteNew);
      };

      viewModel.closeReactVersionChangeDialog = () => {
        viewModel.selectedStepVersionChangeDialogProps = null;
        safeDigest($scope);
      };

      // Keep configuration panel Tabs state on version change.
      viewModel.tabId = undefined;
      viewModel.setTabId = (tabId) => {
        viewModel.tabId = tabId;
        safeDigest($scope);
      };
      $scope.$watch(() => viewModel.selectedStep, () => {
        viewModel.setTabId(undefined);
      });

      // New workflow config panel related stuffs...
      viewModel.editedWorkflowConfigForReact = {};
      viewModel.editedWorkflowConfigForReactChanged = (data) => {
        viewModel.editedWorkflow.title(data.properties.title || null);
        viewModel.editedWorkflow.summary(data.properties.summary || null);
        viewModel.editedWorkflow.description(data.properties.description || null);

        const newStack = Stack.all?.find((s) => s.id === data.configuration.stackId) ?? null;
        viewModel.editedWorkflow.stack(newStack);

        if (data.isMachineTypeSelectorAvailable) {
          const newMachineType = MachineType.all.find((m) => m.id === data.configuration.machineTypeId) ?? null;
          viewModel.editedWorkflow.machineType(undefined, newMachineType);
        }

        viewModel.editedWorkflow.envs(data.configuration.envs.map(({key, value, isExpand: is_expand}) => {
          return {[key]: EnvVarService.toYmlValue(value), opts: {is_expand}};
        }));

        if (viewModel.editedWorkflow.id !== data.workflowId) {
          viewModel.renameWorkflowConfirmed(viewModel.editedWorkflow, data.workflowId, false);
          workflowSelectionService.rearrangeSelection(viewModel, viewModel.selectedWorkflow, data.workflowId);
        }

        safeDigest($scope);
      };

      function transformEditedWorkflowForReact() {
        if (viewModel.editedWorkflow) {
          const stack = viewModel.editedWorkflow.stack();
          const stackType = stack?.type || appService.stack?.type;
          const machineType = viewModel.editedWorkflow.machineType(stackType, undefined, MachineType.all);

          viewModel.editedWorkflowConfigForReact = {
            workflowId: viewModel.editedWorkflow.id,
            defaultStackId: appService.stack?.id || '',
            defaultMachineTypeId: appService.defaultMachineType?.id || '',
            isMachineTypeSelectorAvailable: appService.appDetails?.isMachineTypeSelectorAvailable,
            configuration: {
              stackId: stack?.id || '',
              machineTypeId: machineType?.id || '',
              envs: viewModel.editedWorkflow.envs()?.map(({opts, ...env}) => {
                const [key, value] = Object.entries(angular.copy(env))[0];
                const isExpand = opts?.is_expand ?? true;

                return {key, value, isExpand};
              })
            },
            properties: {
              title: viewModel.editedWorkflow.title(),
              summary: viewModel.editedWorkflow.summary(),
              description: viewModel.editedWorkflow.description(),
            },
          };
        }
      }

      viewModel.onChangeYml = (yml) => {
        appService.appConfig = yml;
        safeDigest($rootScope);
      }
    });
})();
