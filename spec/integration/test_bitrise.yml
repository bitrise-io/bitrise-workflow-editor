---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other
trigger_map:
- push_branch: master
  type: push
  pipeline: release-pipeline
- pull_request_source_branch: "*"
  type: pull_request
  pipeline: ci-pipeline
pipelines:
  ci-pipeline:
    stages:
    - ci-checks: {}
    - e2e-stage: {}
  release-pipeline:
    stages:
    - bump-version-stage: {}
    - release-stage: {}
  experiment-pipeline:
    stages:
    - release-experiment-stage: {}
stages:
  ci-checks:
    title: Run CI checks such as linting, unit tests, e2e tests, deploy storybook
    workflows:
    - run-ci-checks: {}
    - run-deploy-storybook: {}
  e2e-stage:
    title: Run end-to-end tests
    workflows:
    - run-client-e2e-tests:
        run_if: 'false'
  bump-version-stage:
    title: Bump the versions
    workflows:
    - run-bump-version-numbers: {}
  release-stage:
    title: Release new website and CLI plugin version
    workflows:
    - release-plugin: {}
    - release-website: {}
  release-experiment-stage:
    title: Release a new website experimental version to GCS
    workflows:
    - release-website-experiment: {}
workflows:
  _api-server-unit-tests:
    title: go lint & go vet & errcheck & go test
    steps:
    - script:
        title: go vet & golint & errcheck
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go vet ./...
            golint ./...
            errcheck -asserts=true -blank=true ./...
    - script:
        title: go test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            go test ./...
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  _build-api-server:
    title: Build the Go API server binaries
    description: Creates Linux and Darwin binaries with embedded assets
    steps:
    - script@1:
        title: compile_api.sh
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            if [[ ! -f $BIN_PATH_LINUX ]]; then
              ./_scripts/compile_api.sh
            fi
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  _build-client:
    title: Build the client
    envs:
    - NODE_ENV: prod
    steps:
    - script:
        title: npm run build
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            npm run build
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  _bump-version-numbers:
    steps:
    - script@1:
        title: Bump editor version
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            # update patch version
            NEW_VERSION=$(npm version --no-git-tag-version patch)
            next_version=${NEW_VERSION:1} ./_scripts/set_version.sh version/version.go bitrise-plugin.yml
            FILES=(package.json package-lock.json version/version.go bitrise-plugin.yml)

            # push changes
            git add "${FILES[@]}"
            git commit -m "[skip ci] - $NEW_VERSION"
            git push origin HEAD:master
  _client-e2e-tests:
    steps:
    - script@1:
        deps:
          apt_get:
          - name: libasound2
          - name: libgbm-dev
          - name: libgconf-2-4
          - name: libgtk-3-0
          - name: libgtk2.0-0
          - name: libnss3
          - name: libxss1
          - name: libxtst6
          - name: xauth
          - name: xvfb
        inputs:
        - content: echo "Installing Cypress dependencies"
        title: Install Cypress deps
    - script@1:
        title: npm run e2e
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            npm run e2e
  _client-unit-tests:
    title: npm run lint & npm run test & npm run test:jest
    steps:
    - script:
        title: npm run lint
        inputs:
        - content: npm run lint
    - script:
        title: npm run test
        inputs:
        - content: npm run test
    - script:
        title: npm run test:jest
        inputs:
        - content: npm run test:jest
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  _clone:
    title: Clone the repository
    steps:
    - set-git-credentials@1:
        inputs:
        - git_email_address: ci@bitrise.io
        - git_user_name: "$GITHUB_USERNAME"
    - change-workdir@1:
        inputs:
        - path: "$GOPATH/src/github.com/bitrise-io/bitrise-workflow-editor"
    - activate-ssh-key@4: {}
    - git-clone@8:
        inputs:
        - update_submodules: 'no'
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: elite
  _deploy-storybook:
    steps:
    - script@1:
        title: npm run build-storybook
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -exo pipefail

            npm run build-storybook
    - script@1:
        is_skippable: true
        title: run deploy-storybook
        run_if: (or .IsPR (enveq "BITRISE_GIT_BRANCH" "master"))
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -exo pipefail

            node ./.storybook/deploy-storybook.js
  _export-test-results:
    steps:
    - script@1:
        title: Export test results
        is_skippable: true
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -exo pipefail

            # Creating a sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:

            echo "the current directory"
            pwd

            test_run_dir="$BITRISE_TEST_RESULT_DIR/result_dir_1"
            mkdir "$test_run_dir"


            DIR=spec/integration/cypress/results/
            if [ -d "$DIR" ];
            then
                cp -r spec/integration/cypress/results/test-report.xml "$test_run_dir/test-report.xml"
            fi

            DIR=spec/integration/cypress/screenshots/
            if [ -d "$DIR" ];
            then
                find spec/integration/cypress/screenshots -mindepth 2 -type f -exec mv -i '{}' "$test_run_dir" ';'
            fi

            DIR=spec/integration/cypress/videos/
            if [ -d "$DIR" ];
            then
                find spec/integration/cypress/videos -mindepth 2 -type f -exec mv -i '{}' "$test_run_dir" ';'
            fi

            touch "$test_run_dir/test-info.json"
            echo "{ \"test-name\":\"Cypress tests\" }" > "$test_run_dir/test-info.json"
        is_always_run: true
    - deploy-to-bitrise-io@2: {}
  _install-api-server-deps:
    title: Install the API server dependencies
    steps:
    - script:
        title: go install
        inputs:
        - script_file_path:
        - content: |-
            #!/bin/bash
            set -exo pipefail

            go install golang.org/x/lint/golint@latest
            go install github.com/kisielk/errcheck@latest
            go install github.com/GeertJohan/go.rice/rice@latest
            asdf reshim golang
    before_run:
    - _install-go
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  _install-client-deps:
    title: Install the client dependencies
    before_run:
    - _install-node
    - _restore-npm-cache
    after_run:
    - _save-npm-cache
    steps:
    - script@1:
        title: bundle install
        deps:
          apt_get:
          - name: ruby
          - name: ruby-dev
          - name: build-essential
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            gem install -f bundler:2.5.6
            bundle install
    - script@1:
        title: npm ci
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            npm config set fetch-timeout 600000
            npm config set fetch-retries 5
            npm config set fetch-retry-mintimeout 20000
            npm config set fetch-retry-maxtimeout 120000

            npm ci
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: elite
  _install-go:
    title: Install the API server dependencies
    steps:
    - script@1:
        title: asdf install golang
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            asdf install golang
            asdf reshim golang
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  _install-node:
    title: Install the client dependencies
    steps:
    - script@1:
        title: asdf install nodejs
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            asdf install nodejs
            asdf reshim nodejs
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: elite
  _restore-npm-cache:
    steps:
    - restore-cache@2:
        inputs:
        - key: '{{ .OS }}-{{ .Arch }}-npm-cache-{{ checksum "package-lock.json" "yarn.lock"
            }}'
        title: Restore NPM cache (.npm)
  _save-npm-cache:
    steps:
    - save-cache@1:
        inputs:
        - paths: "/root/.npm"
        - key: '{{ .OS }}-{{ .Arch }}-npm-cache-{{ checksum "package-lock.json" "yarn.lock"
            }}'
        title: Save NPM cache (.npm)
  _update_versions:
    steps:
    - nvm@1:
        inputs:
        - node_version: '20'
    - script@1:
        inputs:
        - script_file_path:
        - runner_bin: node
        - content: |-
            const [newValue, fallbackValue] = process.env.NPM_PACKAGE_VERSION.split(':');

            if (!newValue.match(/^\d+\.\d+\.\d+$/)) throw new Error(`Invalid WFE Current version: ${newValue}`);

            if (fallbackValue && !fallbackValue.match(/^\d+\.\d+\.\d+$/)) throw new Error(`Invalid WFE Fallback version: ${newValue}`);

            const API_TOKEN = process.env.LD_VERSION_UPDATE_API_TOKEN;
            const PROJECT_KEY = process.env.LD_PROJECT_KEY;
            const FLAG_KEY = process.env.LD_FLAG_KEY;
            const API_URL = `https://app.launchdarkly.com/api/v2/flags/${PROJECT_KEY}/${FLAG_KEY}`;

            (async () => {

              const response = await fetch(API_URL, {
                headers: {
                  'Authorization': API_TOKEN,
                  'Content-Type': 'application/json',
                }
              });

              const data = await response.json();

              console.log(response.status, data.variations);

              const currentVariation = data.variations.find(variation => variation.name === 'Current');
              const fallbackVariation = data.variations.find(variation => variation.name === 'Fallback');

              const patchInstructions = [
                {
                  kind: "updateVariation",
                  variationId: fallbackVariation._id,
                  value: "temp",
                },
                {
                  kind: "updateVariation",
                  variationId: currentVariation._id,
                  value: newValue,
                },
                {
                  kind: "updateVariation",
                  variationId: fallbackVariation._id,
                  value: fallbackValue || currentVariation.value,
                }
              ];

              console.log(patchInstructions);

              const patchResponse = await fetch(API_URL, {
                method: 'PATCH',
                headers: {
                  'Authorization': API_TOKEN,
                  'Content-Type': 'application/json; domain-model=launchdarkly.semanticpatch',
                },
                body: JSON.stringify({
                  instructions: patchInstructions
                }),
              });

              const updatedData = await patchResponse.json();

              console.log(patchResponse.status, updatedData.variations);

              if (!patchResponse.ok) throw new Error(patchResponse.statusText);

            })();
        title: WFE Version Update
    envs:
    - LD_PROJECT_KEY: website
      opts:
        is_expand: false
    - LD_FLAG_KEY: workflow-editor-version
      opts:
        is_expand: false
    summary: Update Worflow Editor Versions in Launch Darkly
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  ci:
    before_run:
    - _clone
    - _install-client-deps
    - _build-client
    - _install-api-server-deps
    - _build-api-server
    after_run:
    - _api-server-unit-tests
    - _client-unit-tests
    - _deploy-storybook
  manual-update-version:
    envs:
    - LD_PROJECT_KEY: website
      opts:
        is_expand: false
    - LD_FLAG_KEY: api-testing
      opts:
        is_expand: false
    summary: Update Worflow Editor Versions in Launch Darkly
    after_run:
    - _update_versions
    steps:
    - set-env-var@0:
        inputs:
        - value: "$BITRISE_GIT_BRANCH"
        - destination_keys: NPM_PACKAGE_VERSION
        title: Set Git Branch as $NPM_PACKAGE_VERSION
  release-new-version:
    before_run:
    - ci
    - _bump-version-numbers
    steps:
    - script@1:
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            if [[ -z "${BITRISE_GIT_COMMIT}" ]]; then
              echo "Error: Missing BITRISE_GIT_COMMIT variable!"
              echo "       In the 'Advanced' settings of the 'Start/schedule build' dialog, you should set the 'Commit hash' field."
              exit 1
            fi
        title: Check BITRISE_GIT_COMMIT variable
    - script@1:
        title: Trigger website deploy and plugin release workflows
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -exo pipefail

            curl --fail https://app.bitrise.io/app/1686da85b5935fd6/build/start.json --data '{"hook_info":{"type":"bitrise","build_trigger_token":"'"${BUILD_TRIGGER_TOKEN}"'"},"build_params":{"branch":"master","commit_hash":"'"${BITRISE_GIT_COMMIT}"'","workflow_id":"release-website"},"triggered_by":"deploy-new-version workflow"}'
            curl --fail https://app.bitrise.io/app/1686da85b5935fd6/build/start.json --data '{"hook_info":{"type":"bitrise","build_trigger_token":"'"${BUILD_TRIGGER_TOKEN}"'"},"build_params":{"branch":"master","commit_hash":"'"${BITRISE_GIT_COMMIT}"'","workflow_id":"release-plugin"},"triggered_by":"deploy-new-version workflow"}'
  release-plugin:
    before_run:
    - _clone
    - _install-client-deps
    - _install-api-server-deps
    envs:
    - opts:
        is_expand: false
      NODE_ENV: prod
    - opts:
        is_expand: false
      DISCUSS_USERNAME: ninja
    - opts:
        is_expand: false
      BIN_PATH_DARWIN: _bin/workflow-editor-Darwin-x86_64
    - opts:
        is_expand: false
      BIN_PATH_LINUX: _bin/workflow-editor-Linux-x86_64
    - opts:
        is_expand: false
      BIN_PATH_DARWIN_ARM64: _bin/workflow-editor-Darwin-arm64
    steps:
    - get-npm-package-version@1:
        title: Get editor version
    - script@1:
        title: Apply ASDF env
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            source ~/.asdf/asdf.sh
            envman add --key PATH --value $PATH
    - script:
        title: Build plugin
        inputs:
        - script_file_path:
        - content: npm run build:plugin
    - deploy-to-bitrise-io:
        title: Deploy to Bitrise.io - Plugin
        is_always_run: false
    - generate-changelog@0:
        inputs:
        - new_version: "$NPM_PACKAGE_VERSION"
    - github-release@0.11:
        inputs:
        - api_token: "$GITHUB_API_TOKEN"
        - username: "$GITHUB_USERNAME"
        - repository_url: https://github.com/bitrise-io/bitrise-workflow-editor.git
        - draft: 'no'
        - name: v$NPM_PACKAGE_VERSION
        - body: |-
            $BITRISE_CHANGELOG

            ### Install or upgrade

            To install this version, run the following commands (in a bash shell):

            ```
            bitrise plugin install --source https://github.com/bitrise-io/bitrise-workflow-editor.git --version $NPM_PACKAGE_VERSION
            ```

            To update the already installed plugin to the latest version:

            ```
            bitrise plugin update workflow-editor
            ```

            That's all, you're ready to go!

            To run the workflow editor plugin call:

            ```
            bitrise :workflow-editor
            ```
        - tag: "$NPM_PACKAGE_VERSION"
        - files_to_upload: |-
            $BIN_PATH_DARWIN
            $BIN_PATH_LINUX
            $BIN_PATH_DARWIN_ARM64
    - script@1:
        is_skippable: true
        title: Create Discuss topic
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            # generate release content...
            go install github.com/cbroglie/mustache/cmd/mustache@latest
            asdf reshim

            DATA="---
            VERSION: $NPM_PACKAGE_VERSION
            CHANGELOG: |
              ${BITRISE_CHANGELOG//$'\n'/$'\n  '}
            "

            DISCUSS_RELEASE_CONTENT=$(echo "$DATA" | mustache release/discuss_release.mustache)
            DISCUSS_CHANGELOG_CATEGORY_ID=6

            curl -X POST "https://discuss.bitrise.io/posts" \
                   -H "Content-Type: multipart/form-data;" \
                   -F "api_key=$DISCUSS_API_KEY" \
                   -F "api_username=$DISCUSS_USERNAME" \
                   -F "category=$DISCUSS_CHANGELOG_CATEGORY_ID" \
                   -F "title=Workflow Editor v$NPM_PACKAGE_VERSION released" \
                   -F "raw=$DISCUSS_RELEASE_CONTENT"
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  release-website:
    before_run:
    - _clone
    - _install-client-deps
    envs:
    - opts:
        is_expand: false
      NODE_ENV: prod
    - opts:
        is_expand: false
      PUBLIC_URL_ROOT: https://workflow-editor-cdn.bitrise.io/workflow_editor
    - opts:
        is_expand: false
      FRONTEND_ASSET_BUCKET: workflow-editor-cdn.bitrise.io
    steps:
    - script@1:
        title: Apply ASDF env
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            source ~/.asdf/asdf.sh
            envman add --key PATH --value $PATH
    - get-npm-package-version@1:
        title: Get editor version
    - script:
        title: Build website
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -exo pipefail

            npm run build:website
        - script_file_path:
        - command: run build:website
    - script@1:
        inputs:
        - script_file_path:
        - content: |-
            #!/bin/bash
            set -euxo pipefail
            KEY_FILE_PATH=$(mktemp -d)/keyfile.json
            echo "${GCS_SERVICE_ACCOUNT_CREDENTIALS_B64}" | base64 --decode > ${KEY_FILE_PATH}
            gcloud auth activate-service-account --key-file=${KEY_FILE_PATH}
            gcloud storage cp -R ./build gs://$FRONTEND_ASSET_BUCKET/workflow_editor/$NPM_PACKAGE_VERSION
            rm $KEY_FILE_PATH
        title: Deploy to GCS
    after_run:
    - _update_versions
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  release-website-experiment:
    before_run:
    - _clone
    - _install-client-deps
    - _install-go
    envs:
    - opts:
        is_expand: false
      NODE_ENV: prod
    - opts:
        is_expand: false
      PUBLIC_URL_ROOT: https://workflow-editor-cdn.bitrise.io/workflow_editor
    - opts:
        is_expand: false
      FRONTEND_ASSET_BUCKET: workflow-editor-cdn.bitrise.io
    steps:
    - script:
        title: Apply ASDF env
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -exo pipefail

            source ~/.asdf/asdf.sh
            envman add --key PATH --value $PATH
    - script:
        inputs:
        - script_file_path:
        - content: |-
            #!/bin/bash
            set -euxo pipefail

            npm version --no-git-tag-version "2.0.${BITRISE_BUILD_NUMBER}-beta"
            next_version="2.0.${BITRISE_BUILD_NUMBER}-beta" ./_scripts/set_version.sh version/version.go bitrise-plugin.yml
        title: Set experimental version 2.0.{build_number}-beta
    - script:
        title: Build website
        inputs:
        - script_file_path:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -exo pipefail

            npm run build:website
    - script:
        title: Deploy to GCS
        inputs:
        - content: |-
            #!/bin/bash
            set -euxo pipefail

            KEY_FILE_PATH=$(mktemp -d)/keyfile.json
            echo "${GCS_SERVICE_ACCOUNT_CREDENTIALS_B64}" | base64 --decode > ${KEY_FILE_PATH}
            gcloud auth activate-service-account --key-file=${KEY_FILE_PATH}
            gcloud storage cp -R ./build gs://$FRONTEND_ASSET_BUCKET/workflow_editor/2.0.$BITRISE_BUILD_NUMBER-beta
            rm $KEY_FILE_PATH
  run-api-server-unit-tests:
    before_run:
    - _clone
    - _install-api-server-deps
    after_run:
    - _api-server-unit-tests
  run-bump-version-numbers:
    before_run:
    - _clone
    - _install-node
    - _install-go
    - _bump-version-numbers
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  run-ci-checks:
    before_run:
    - _clone
    - _install-client-deps
    - _install-api-server-deps
    - _build-client
    - _build-api-server
    - _api-server-unit-tests
    - _client-unit-tests
    steps:
    - deploy-to-bitrise-io@2: {}
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  run-client-e2e-tests:
    before_run:
    - _clone
    - _install-client-deps
    after_run:
    - _client-e2e-tests
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  run-client-unit-tests:
    before_run:
    - _clone
    - _install-client-deps
    - _build-client
    - _client-unit-tests
  run-deploy-storybook:
    before_run:
    - _clone
    - _install-client-deps
    after_run:
    - _deploy-storybook
    meta:
      bitrise.io:
        stack: linux-docker-android-22.04
        machine_type_id: ''
  temp:
    before_run:
    - _build-client
    after_run:
    - _client-unit-tests
    envs:
    - FOO: bar
      opts:
        is_expand: false
    steps:
    - script@1:
        title: Hello World
  update-algolia:
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/bin/bash
            set -exo pipefail

            # mock envvars, spec.json
            curl http://bitrise-steplib-collection.s3.amazonaws.com/spec.json -o /tmp/spec.json
            export SPEC_JSON_PATH=/tmp/spec.json
            # export DRY_RUN=true

            # actual step content
            git clone https://github.com/bitrise-io/steplib-search.git

            export BITRISE_SOURCE_DIR="$BITRISE_SOURCE_DIR/steplib-search"
            cd steplib-search

            bitrise run update-algolia
        asset_urls:
          icon.svg: https://bitrise-steplib-collection.s3.amazonaws.com/steps/script/assets/icon.svg
    - slack:
        inputs:
        - channel: "#bitrise-steplib"
        - text: New version!
        - emoji: ":bell:"
        - webhook_url: "$SLACK_WEBHOOK_URL"
meta:
  bitrise.io:
    machine_type_id: elite
    stack: linux-docker-android-22.04
app:
  envs:
  - opts:
      is_expand: false
    STORYBOOK_GCP_DEPLOY_BUCKET: bitrise-storybook-dev
  - opts:
      is_expand: false
    CYPRESS_CACHE_FOLDER: node_modules/.cache/cypress
  - opts:
      is_expand: false
    BIN_PATH_DARWIN: _bin/workflow-editor-Darwin-x86_64
  - opts:
      is_expand: false
    BIN_PATH_DARWIN_ARM64: _bin/workflow-editor-Darwin-arm64
  - opts:
      is_expand: false
    BIN_PATH_LINUX: _bin/workflow-editor-Linux-x86_64
  - opts:
      is_expand: false
    NODE_ENV: prod
  - opts:
      is_expand: false
    BITRISE_NO_OUTPUT_TIMEOUT: '300'
  - opts:
      is_expand: false
    NODE_BUILD_CURL_OPTS: "--retry 5"
